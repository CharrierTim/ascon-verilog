# -------------------------------------------------------------------------------------------------
# --  Author: Timothee Charrier
# -------------------------------------------------------------------------------------------------
# -- Some parts are taken and adapted from:
# -- https://github.com/open-logic/open-logic/blob/main/lint/config/vsg_config.yml
# -- By Patrick Studer
# -------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
# -- Indent Tokens (https://vhdl-style-guide.readthedocs.io/en/stable/configuring_indentation.html)
# -------------------------------------------------------------------------------------------------
indent:
    tokens:
        alias_declaration:
            alias_keyword:
                after: current
                token: current
        architecture_body:
            architecture_keyword:
                after: 1
                token: 0
            begin_keyword:
                after: 1
                token: 0
            end_keyword:
                after: 0
                token: 0
        assertion:
            keyword:
                after: "+1"
                token: current
            report_keyword:
                after: current
                token: current
            severity_keyword:
                after: current
                token: current
        assertion_statement:
            label:
                after: current
                token: current
            semicolon:
                after: "-1"
                token: current
        association_element:
            formal_part:
                after: current
                token: current
        attribute_declaration:
            attribute_keyword:
                after: current
                token: current
        attribute_specification:
            attribute_keyword:
                after: current
                token: current
        block_statement:
            begin_keyword:
                after: current
                token: "-1"
            block_label:
                after: "+1"
                token: current
            end_keyword:
                after: "-1"
                token: "-1"
        case_generate_alternative:
            when_keyword:
                after: current
                token: "-1"
        case_generate_statement:
            end_keyword:
                after: "-2"
                token: "-2"
            generate_label:
                after: "+2"
                token: current
        case_statement:
            case_keyword:
                after: "+2"
                token: current
            case_label:
                after: current
                token: current
            end_keyword:
                after: "-2"
                token: "-2"
        case_statement_alternative:
            when_keyword:
                after: current
                token: "-1"
        component_declaration:
            component_keyword:
                after: "+1"
                token: current
            end_keyword:
                after: "-1"
                token: "-1"
        component_instantiation_statement:
            instantiation_label:
                after: current
                token: current
            semicolon:
                after: current
                token: current
        concurrent_assertion_statement:
            label_name:
                after: current
                token: current
            semicolon:
                after: "-1"
                token: "-1"
        concurrent_conditional_signal_assignment:
            target:
                after: current
                token: current
        concurrent_procedure_call_statement:
            label_name:
                after: current
                token: current
            postponed_keyword:
                after: current
                token: current
        concurrent_selected_signal_assignment:
            semicolon:
                after: "-1"
                token: current
            with_keyword:
                after: "+1"
                token: current
        concurrent_signal_assignment_statement:
            label_name:
                after: current
                token: current
            postponed_keyword:
                after: current
                token: current
        concurrent_simple_signal_assignment:
            target:
                after: current
                token: current
        conditional_variable_assignment:
            target:
                after: current
                token: current
        conditional_waveform_assignment:
            target:
                after: current
                token: current
        constant_declaration:
            constant_keyword:
                after: current
                token: current
        context_declaration:
            context_keyword:
                after: "+1"
                token: 0
            end_keyword:
                after: 0
                token: 0
        entity_declaration:
            begin_keyword:
                after: 1
                token: 0
            end_keyword:
                after: 0
                token: 0
            entity_keyword:
                after: 1
                token: 0
        enumeration_type_definition:
            close_parenthesis:
                after: "-1"
                token: "-1"
            enumeration_literal:
                after: current
                token: current
            open_parenthesis:
                after: "+1"
                token: current
        exit_statement:
            exit_keyword:
                after: current
                token: current
            label:
                after: current
                token: current
        file_declaration:
            file_keyword:
                after: current
                token: current
        file_open_information:
            is_keyword:
                after: current
                token: "+1"
            open_keyword:
                after: current
                token: "+1"
        for_generate_statement:
            end_keyword:
                after: "-1"
                token: "-1"
            generate_label:
                after: "+1"
                token: current
        full_type_declaration:
            type_keyword:
                after: current
                token: current
        function_specification:
            close_parenthesis:
                after: "current"
                token: "-1"
            function_keyword:
                after: "+1"
                token: current
            impure_keyword:
                after: current
                token: current
            pure_keyword:
                after: current
                token: current
        generate_statement_body:
            begin_keyword:
                after: current
                token: "-1"
            end_keyword:
                after: current
                token: "-1"
        generic_clause:
            close_parenthesis:
                after: "-1"
                token: "-1"
            generic_keyword:
                after: "+1"
                token: current
        generic_map_aspect:
            close_parenthesis:
                after: "-2"
                token: "-1"
            generic_keyword:
                after: "+2"
                token: "+1"
        identifier_list:
            identifier:
                after: current
                token: current
        if_generate_statement:
            else_keyword:
                after: current
                token: "-1"
            elsif_keyword:
                after: current
                token: "-1"
            end_keyword:
                after: "-1"
                token: "-1"
            generate_label:
                after: "+1"
                token: current
            if_keyword:
                after: current
                token: "-1"
        if_statement:
            else_keyword:
                after: current
                token: "-1"
            elsif_keyword:
                after: current
                token: "-1"
            end_keyword:
                after: "-1"
                token: "-1"
            if_keyword:
                after: "+1"
                token: current
            if_label:
                after: current
                token: current
        incomplete_type_declaration:
            type_keyword:
                after: current
                token: current
        interface_constant_declaration:
            constant_keyword:
                after: current
                token: current
        interface_file_declaration:
            file_keyword:
                after: current
                token: current
        interface_function_specification:
            function_keyword:
                after: current
                token: current
        interface_incomplete_type_declaration:
            type_keyword:
                after: current
                token: current
        interface_package_declaration:
            package_keyword:
                after: current
                token: current
        interface_procedure_specification:
            procedure_keyword:
                after: current
                token: current
        interface_signal_declaration:
            signal_keyword:
                after: current
                token: current
        interface_unknown_declaration:
            identifier:
                after: current
                token: current
        interface_variable_declaration:
            variable_keyword:
                after: current
                token: current
        iteration_scheme:
            for_keyword:
                after: current
                token: current
            while_keyword:
                after: current
                token: current
        library_clause:
            keyword:
                after: current
                token: current
        loop_statement:
            end_keyword:
                after: "-1"
                token: "-1"
            loop_keyword:
                after: "+1"
                token: current
            loop_label:
                after: current
                token: current
        null_statement:
            label:
                after: current
                token: current
            null_keyword:
                after: current
                token: current
        package_body:
            end_keyword:
                after: "-1"
                token: "-1"
            package_keyword:
                after: "+1"
                token: current
        package_declaration:
            end_keyword:
                after: "-1"
                token: "-1"
            package_keyword:
                after: "+1"
                token: current
        port_clause:
            close_parenthesis:
                after: "-1"
                token: "-1"
            port_keyword:
                after: "+1"
                token: current
        port_map_aspect:
            close_parenthesis:
                after: "-2"
                token: "-1"
            port_keyword:
                after: "+2"
                token: "+1"
        procedure_call:
            procedure_name:
                after: current
                token: current
        procedure_call_statement:
            label:
                after: current
                token: current
        procedure_specification:
            close_parenthesis:
                after: "current"
                token: "-1"
            procedure_keyword:
                after: "+1"
                token: current
        process_statement:
            begin_keyword:
                after: current
                token: "-1"
            end_keyword:
                after: "-1"
                token: "-1"
            postponed_keyword:
                after: current
                token: current
            process_keyword:
                after: "+1"
                token: current
            process_label:
                after: current
                token: current
        protected_type_body:
            body_keyword:
                after: "+1"
                token: current
            end_keyword:
                after: "-1"
                token: "-1"
        protected_type_declaration:
            end_keyword:
                after: "-1"
                token: "-1"
            protected_keyword:
                after: "+1"
                token: current
        record_type_definition:
            end_keyword:
                after: "-1"
                token: "-1"
            record_keyword:
                after: "+1"
                token: current
        report_statement:
            report_keyword:
                after: "+1"
                token: current
            semicolon:
                after: "-1"
                token: current
            severity_keyword:
                after: current
                token: current
        return_statement:
            return_keyword:
                after: "+1"
                token: current
            semicolon:
                after: "-1"
                token: current
        selected_force_assignment:
            semicolon:
                after: "-1"
                token: current
            with_keyword:
                after: "+1"
                token: current
        selected_variable_assignment:
            semicolon:
                after: "-1"
                token: current
            with_keyword:
                after: "+1"
                token: current
        selected_waveform_assignment:
            semicolon:
                after: "-1"
                token: current
            with_keyword:
                after: "+1"
                token: current
        signal_assignment_statement:
            label:
                after: current
                token: current
        signal_declaration:
            signal_keyword:
                after: current
                token: current
        simple_force_assignment:
            target:
                after: current
                token: current
        simple_release_assignment:
            target:
                after: current
                token: current
        simple_variable_assignment:
            aggregate_close_parenthesis:
                after: "-1"
                token: "-1"
            aggregate_open_parenthesis:
                after: "+1"
                token: current
            simple_name:
                after: current
                token: current
        simple_waveform_assignment:
            target:
                after: current
                token: current
        subprogram_body:
            begin_keyword:
                after: current
                token: "-1"
            end_keyword:
                after: current
                token: "-1"
            semicolon:
                after: "-1"
                token: current
        subprogram_declaration:
            semicolon:
                after: "-1"
                token: current
        subtype_declaration:
            subtype_keyword:
                after: current
                token: current
        use_clause:
            keyword:
                after: current
                token: current
                token_after_library_clause: "+1"
                token_if_no_matching_library_clause: "+1"
        variable_assignment_statement:
            label:
                after: current
                token: current
        variable_declaration:
            shared_keyword:
                after: current
                token: current
            variable_keyword:
                after: current
                token: current
        wait_statement:
            label:
                after: current
                token: current
            wait_keyword:
                after: current
                token: current

rule:
    # ---------------------------------------------------------------------------------------------
    # -- Global Definitions
    # ---------------------------------------------------------------------------------------------
    global:
        indent_size: 4
        indent_style: spaces

    # ---------------------------------------------------------------------------------------------
    # Architecture Rules
    # ---------------------------------------------------------------------------------------------

    architecture_001:
        # This rule checks for blank spaces before the architecture keyword.
        phase: 4

    architecture_003:
        # This rule checks for a blank lines or comments above the architecture declaration.
        style: allow_comment

    architecture_004:
        # This rule checks the proper case of the architecture keyword in the architecture declaration.
        case: lower

    architecture_005:
        # This rule checks the of keyword is on the same line as the architecture keyword.
        action: same_line

    architecture_006:
        # This rule checks the is keyword is on the same line as the architecture keyword.
        action: same_line

    architecture_007:
        # This rule checks for spaces before the begin keyword.
        phase: 4

    architecture_008:
        # This rule checks for spaces before the end architecture keywords.
        phase: 4

    architecture_009:
        # This rule checks the end keyword has proper case.
        case: lower

    architecture_010:
        # This rule checks for the keyword architecture in the end architecture statement. It is clearer to the reader to state what is ending.
        action: add

    architecture_011:
        # This rule checks the architecture name case in the end architecture statement.
        case: upper
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    architecture_012:
        # This rule checks for a single space between end and architecture keywords.
        number_of_spaces: 1

    architecture_013:
        # This rule checks the case of the architecture name in the architecture declaration.
        case: upper
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    architecture_014:
        # This rule checks the case of the entity name in the architecture declaration.
        case: upper
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    architecture_015:
        # This rule checks for blank lines below the architecture declaration.
        style: require_blank_line

    architecture_016:
        # This rule checks for blank lines above the begin keyword.
        style: require_blank_line

    architecture_017:
        # This rule checks for a blank line below the begin keyword.
        style: require_blank_line

    architecture_018:
        # This rule checks for blank lines or comments above the end architecture declaration.
        style: require_blank_line

    architecture_019:
        # This rule checks the proper case of the of keyword in the architecture declaration.
        case: lower

    architecture_020:
        # This rule checks the proper case of the is keyword in the architecture declaration.
        case: lower

    architecture_021:
        # This rule checks the proper case of the begin keyword.
        case: lower

    architecture_022:
        # This rule checks for a single space before the entity name in the end architecture declaration.
        number_of_spaces: 1

    architecture_024:
        # This rule checks for the architecture name in the end architecture statement. It is clearer to the reader to state which architecture the end statement is closing.
        action: keep

    architecture_025:
        # This rule checks for valid names for the architecture.
        disable: true
        fixable: false
        names: ["rtl"]
        severity: Warning

    architecture_026:
        # This rule checks the colons are in the same column for all declarations in the architecture declarative part.
        blank_line_ends_group: no
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        include_type_is_keyword: no
        loop_control_statements_ends_group: yes

    architecture_027:
        # This rule checks the alignment of inline comments in the architecture declarative part.
        blank_line_ends_group: yes
        case_control_statements_ends_group: yes
        comment_line_ends_group: yes
        compact_alignment: yes
        if_control_statements_ends_group: yes
        include_type_is_keyword: no
        loop_control_statements_ends_group: yes

    architecture_028:
        # This rule checks the architecture keyword in the end architecture has proper case.
        case: lower

    architecture_029:
        # This rule checks for alignment of names in alias, attribute, type, subtype, constant, signal, variable and file declarations in the architecture declarative region.
        blank_line_ends_group: no
        case_control_statements_ends_group: yes
        comment_line_ends_group: yes
        compact_alignment: yes
        if_control_statements_ends_group: yes
        include_type_is_keyword: no
        loop_control_statements_ends_group: yes

    architecture_030:
        # This rule checks for a single space between architecture and the name.
        number_of_spaces: 1

    architecture_031:
        # This rule checks for a single space between the name and the of keyword.
        number_of_spaces: 1

    architecture_032:
        # This rule checks for a single space between the of keyword and the entity_name.
        number_of_spaces: 1

    architecture_033:
        # This rule checks for a single space between the entity_name and the is keyword.
        number_of_spaces: 1

    architecture_200:
        # This rule checks for a blank line below the end architecture statement.
        style: require_blank_line

    architecture_400:
        # This rule checks the colons are in the same column for all attribute specifications.
        blank_line_ends_group: no
        case_control_statements_ends_group: no
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: no

    architecture_600:
        # This rule checks for consistent capitalization of generic names in an architecture body.
        case: upper

    architecture_601:
        # This rule checks for consistent capitalization of port names in an architecture body.
        case: upper

    # ---------------------------------------------------------------------------------------------
    # Array Constraint Rules
    # ---------------------------------------------------------------------------------------------

    array_constraint_500:
        # This rule checks the open keyword in array constraints has the proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Assert Rules
    # ---------------------------------------------------------------------------------------------

    assert_001:
        # This rule checks indent of multiline assert statements.
        phase: 4

    assert_002:
        # This rule checks the report keyword is on its own line for concurrent assertion statements.
        action: new_line

    assert_003:
        # This rule checks the report keyword is on its own line for sequential assertion statements.
        action: new_line

    assert_004:
        # This rule checks the severity keyword is on its own line for concurrent assertion statements.
        action: new_line

    assert_005:
        # This rule checks the severity keyword is on its own line for sequential assertion statements.
        action: new_line

    assert_100:
        # This rule checks for a single space after the assert keyword.
        number_of_spaces: 1

    assert_101:
        # This rule checks for a single space after the report keyword.
        number_of_spaces: 1

    assert_102:
        # This rule checks for a single space after the severity keyword.
        number_of_spaces: 1

    assert_400:
        # This rule checks the alignment of the report expressions.
        alignment: report

    assert_500:
        # This rule checks the assert keyword has proper case.
        case: lower

    assert_501:
        # This rule checks the report keyword has proper case.
        case: lower

    assert_502:
        # This rule checks the severity keyword has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Attribute Rules (Declaration and Specification)
    # ---------------------------------------------------------------------------------------------

    attribute_500:
        # This rule checks predefined attributes have the proper case.
        case: lower

    attribute_declaration_100:
        # This rule checks for a single space after the following elements: attribute keyword and colon.
        number_of_spaces: 1

    attribute_declaration_101:
        # This rule checks for at least a single space before the colon.
        number_of_spaces: ">=1"

    attribute_declaration_300:
        # This rule checks the indent of the attribute keyword.
        phase: 4

    attribute_declaration_500:
        # This rule checks the attribute keyword has proper case.
        case: lower

    attribute_declaration_501:
        # This rule checks the identifier has proper case.
        case: lower
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    attribute_declaration_502:
        # This rule checks the type_mark has proper case.
        case: lower
        case_exceptions: []

    attribute_specification_100:
        # This rule checks for a single space after the following attribute_specification elements: attribute keyword, attribute_designator, of keyword and is keyword.
        number_of_spaces: 1

    attribute_specification_101:
        # This rule checks for a single space before the is keyword.
        number_of_spaces: 1

    attribute_specification_300:
        # This rule checks the indent of the attribute keyword.
        phase: 4

    attribute_specification_500:
        # This rule checks the attribute keyword has proper case.
        case: lower

    attribute_specification_501:
        # This rule checks the attribute_designator has proper case.
        case: lower
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    attribute_specification_502:
        # This rule checks the of keyword has proper case.
        case: lower

    attribute_specification_503:
        # This rule checks the is keyword has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Bit String Literal Rules
    # ---------------------------------------------------------------------------------------------

    bit_string_literal_500:
        # This rule checks the base specifier has proper case.
        case: lower

    bit_string_literal_501:
        # This rule checks the bit value has proper case.
        case: upper

    # ---------------------------------------------------------------------------------------------
    # Block Rules
    # ---------------------------------------------------------------------------------------------

    block_001:
        # This rule checks the block label and the block keyword are on the same line. Keeping the label and generate on the same line reduces excessive indenting.
        action: same_line

    block_002:
        # This rule checks for the existence of the is keyword.
        action: add

    block_003:
        # This rule checks the is keyword is on the same line as the block keyword.
        action: same_line

    block_004:
        # This rule checks the begin keyword is on its own line.
        action: new_line

    block_005:
        # This rule checks for code after the begin keyword.
        action: new_line

    block_006:
        # This rule checks the end keyword is on its own line.
        action: new_line

    block_007:
        # This rule checks the block label exists in the closing of the block statement.
        action: remove

    block_100:
        # This rule checks for a single space between the following block elements: label, label colon, block keyword, guard open parenthesis, guart close parenthesis, and is keywords.
        number_of_spaces: 1

    block_101:
        # This rule checks for a single space between the end and block keywords and label.
        number_of_spaces: 1

    block_200:
        # This rule checks for blank lines or comments above the block label.
        style: allow_comment

    block_201:
        # This rule checks for a blank line below the block keyword.
        style: no_blank_line

    block_202:
        # This rule checks for blank lines or comments above the begin keyword.
        style: no_blank_line

    block_203:
        # This rule checks for a blank line below the begin keyword.
        disable: true
        style: no_blank_line

    block_204:
        # This rule checks for blank lines or comments above the end keyword.
        disable: true
        style: no_blank_line

    block_205:
        # This rule checks for a blank line below the semicolon.
        style: require_blank_line

    block_300:
        # This rule checks the indent of the block label.
        phase: 4

    block_301:
        # This rule checks the indent of the begin keyword.
        phase: 4

    block_302:
        # This rule checks the indent of the end keyword.
        phase: 4

    block_400:
        # This rule checks the identifiers for all declarations are aligned in the block declarative region.
        blank_line_ends_group: no
        case_control_statements_ends_group: no
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: yes
        severity: Error

    block_401:
        # This rule checks the colons are in the same column for all declarations in the block declarative part.
        blank_line_ends_group: yes
        case_control_statements_ends_group: yes
        comment_line_ends_group: yes
        compact_alignment: yes
        fixable: false
        if_control_statements_ends_group: no
        loop_control_statements_ends_group: no
        severity: Error

    block_402:
        # This rule checks the colons are in the same column for all attribute specifications.
        blank_line_ends_group: yes
        case_control_statements_ends_group: yes
        comment_line_ends_group: yes
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: yes

    block_500:
        # This rule checks the label has proper case.
        fixable: false
        case: lower
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    block_501:
        # This rule checks the block keyword has proper case.
        case: lower

    block_502:
        # This rule checks the is keyword has proper case.
        case: lower

    block_503:
        # This rule checks the begin keyword has proper case.
        case: lower

    block_504:
        # This rule checks the end keyword has proper case.
        case: lower

    block_505:
        # This rule checks the block keyword in the end block has proper case.
        case: lower

    block_506:
        # This rule checks the label has proper case on the end block declaration.
        fixable: false
        case: lower
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    block_600:
        # This rule checks for valid suffixes on block labels. The default suffix is _blk.
        disable: false
        exceptions: []
        severity: Error
        suffixes: []

    block_601:
        # This rule checks for valid prefixes on block labels. The default prefix is blk_.
        exceptions: []
        prefixes: ["B_"]

    block_comment_001:
        # This rule checks the block comment header is correct.
        allow_indenting: yes
        header_alignment: left
        header_left: null
        header_left_repeat: "-"
        header_right_repeat: null
        header_string: null
        max_header_column: 99
        min_height: 3
        severity: Error

    block_comment_002:
        # This rule checks the comment_left attribute exists for all comments.
        allow_indenting: yes
        comment_left: "-"
        disable: true
        min_height: 3
        severity: Error

    block_comment_003:
        # This rule checks the block comment footer is correct.
        allow_indenting: yes
        footer_alignment: left
        footer_left: null
        footer_left_repeat: "-"
        footer_right_repeat: null
        footer_string: null
        max_footer_column: 99
        min_height: 3
        severity: Error

    # ---------------------------------------------------------------------------------------------
    # Case Rules
    # ---------------------------------------------------------------------------------------------

    case_001:
        # This rule checks the indent of case, when, and end case keywords.
        phase: 4

    case_002:
        # This rule checks for a single space after the case keyword.
        number_of_spaces: 1

    case_003:
        # This rule checks for a single space before the is keyword.
        number_of_spaces: 1

    case_004:
        # This rule checks for a single space after the when keyword.
        number_of_spaces: 1

    case_005:
        # This rule checks for a single space before the => operator.
        number_of_spaces: 1

    case_006:
        # This rule checks for a single space between the end and case keywords.
        number_of_spaces: 1

    case_007:
        # This rule checks for blank lines or comments above the case keyword.
        style: allow_comment
        severity: Error

    case_009:
        # This rule checks for blank lines or comments above the end keyword.
        style: require_blank_line

    case_010:
        # This rule checks for a blank line below the end case keywords.
        severity: Error
        style: require_blank_line

    case_011:
        # This rule checks the alignment of multiline when statements.
        alignment: report

    case_012:
        # This rule checks for code after the => operator.
        style: require_blank_line

    case_014:
        # This rule checks the case keyword has proper case.
        case: lower

    case_015:
        # This rule checks the is keyword has proper case.
        case: lower

    case_016:
        # This rule checks the when has proper case.
        case: lower

    case_017:
        # This rule checks the end keyword in the end case has proper case.
        case: lower

    case_018:
        # This rule checks the case keyword has proper case in the end case.
        case: lower

    case_019:
        # This rule checks for labels before the case keyword. The label should be removed. The preference is to have comments above the case statement.
        action: remove

    case_020:
        # This rule checks for labels after the end case keywords. The label should be removed. The preference is to have comments above the case statement.
        action: remove

    case_201:
        # This rule checks for blank lines or comments above the when keyword.
        style: allow_comment

    case_generate_alternative_500:
        # This rule checks the when keyword has proper case.
        case: lower

    case_generate_statement_400:
        # This rule checks the => are aligned in case_generate_alternatives.
        blank_line_ends_group: no
        comment_line_ends_group: no
        compact_alignment: yes
        disable: true
        fixable: false
        severity: Error

    case_generate_statement_500:
        # This rule checks the case keyword has proper case.
        case: lower

    case_generate_statement_501:
        # This rule checks the generate keyword has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Choice Rules
    # ---------------------------------------------------------------------------------------------

    choice_500:
        # This rule checks the indent of the choice keyword.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Comment Rules
    # ---------------------------------------------------------------------------------------------

    comment_004:
        # This rule checks for at least a single space before inline comments.
        number_of_spaces: ">=1"

    comment_010:
        # This rule checks the indent lines starting with comments.
        number_of_spaces: 1

    comment_011:
        # This rule checks for in-line comments and moves them to the line above. The indent of the comment will be set to the indent of the current line.
        disable: true
        fixable: true
        severity: Error

    comment_012:
        # This rule checks for user defined keywords in comments.
        disable: false
        fixable: false
        keywords: ["TODO", "FIXME", "DEADCODE"]
        severity: Error

    comment_100:
        # This rule checks for a single space after the --.
        exceptions: ["---", "--=", "--+", "--!"]
        patterns: []

    # ---------------------------------------------------------------------------------------------
    # Component Rules
    # ---------------------------------------------------------------------------------------------

    component_001:
        # This rule checks the indentation of the component keyword.
        phase: 4

    component_002:
        # This rule checks for a single space after the component keyword.
        number_of_spaces: 1

    component_003:
        # This rule checks for blank lines or comments above the component declaration.
        style: allow_comment

    component_004:
        # This rule checks the component keyword has proper case.
        case: lower

    component_005:
        # This rule checks the is keyword is on the same line as the component keyword.
        action: same_line

    component_006:
        # This rule checks the is keyword has proper case.
        case: lower

    component_007:
        # This rule checks for a single space before the is keyword.
        number_of_spaces: 1

    component_008:
        # This rule checks the component name has proper case in the component declaration.
        case: lower
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    component_009:
        # This rule checks the indent of the end component keywords.
        phase: 4

    component_010:
        # This rule checks the end keyword has proper case.
        case: lower

    component_011:
        # This rule checks for single space after the end keyword.
        number_of_spaces: 1

    component_012:
        # This rule checks the proper case of the component name in the end component line.
        case: lower
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    component_013:
        # This rule checks for a single space after the component keyword in the end component line.
        number_of_spaces: 1

    component_014:
        # This rule checks the component keyword in the end component line has proper case.
        case: lower

    component_016:
        # This rule checks for blank lines above the end component line.
        style: no_blank_line

    component_017:
        # This rule checks the alignment of the colon for each generic and port in the component declaration.
        blank_line_ends_group: no
        comment_line_ends_group: no
        compact_alignment: no
        separate_generic_port_alignment: yes
        severity: Error

    component_018:
        # This rule checks for a blank line below the end component line.
        severity: Error
        style: require_blank_line

    component_019:
        # This rule checks for comments at the end of the port and generic clauses in component declarations. These comments represent additional maintainence. They will be out of sync with the entity at some point. Refer to the entity for port types, port directions and purpose.
        disable: true
        fixable: false
        severity: Error

    component_020:
        # This rule checks for alignment of inline comments in the component declaration.
        blank_line_ends_group: yes
        comment_line_ends_group: yes
        compact_alignment: yes
        disable: true
        fixable: false
        include_lines_without_comments: no
        separate_generic_port_alignment: yes
        severity: Error

    component_021:
        # This rule inserts the optional is keyword if it does not exist.
        action: add

    component_022:
        # This rule inserts the optional **component_simple_name** if it does not exist.
        action: remove

    # ---------------------------------------------------------------------------------------------
    # Concurrent Signal Assignment Rules
    # ---------------------------------------------------------------------------------------------

    concurrent_001:
        # This rule checks the indent of concurrent assignments.
        phase: 4

    concurrent_002:
        # This rule checks for a single space after the <= operator.
        number_of_spaces: 1

    concurrent_003:
        # This rule checks alignment of multiline concurrent simple signal assignments. Succesive lines should align to the space after the assignment operator. However, there is a special case if there are parenthesis in the assignment. If the parenthesis are not closed on the same line, then the next line will be aligned to the parenthesis. Aligning to the parenthesis improves readability.
        align_left: no
        align_paren: yes
        severity: Error

    concurrent_004:
        # This rule checks for at least a single space before the <= operator.
        number_of_spaces: ">=1"

    concurrent_005:
        # This rule checks for labels on concurrent assignments. Labels on concurrents are optional and do not provide additional information.
        action: remove

    concurrent_006:
        # This rule checks the alignment of the <= operator over multiple consecutive lines.
        blank_line_ends_group: no
        comment_line_ends_group: yes
        compact_alignment: yes
        generate_statement_ends_group: yes
        separate_generic_port_alignment: yes

    concurrent_008:
        # This rule checks the alignment of inline comments in consecutive concurrent statements.
        blank_line_ends_group: yes
        comment_line_ends_group: yes
        compact_alignment: yes
        include_lines_without_comments: no
        severity: Error

    concurrent_009:
        # This rule checks alignment of multiline concurrent conditional signal statements.
        align_else_keywords: yes
        align_left: no
        align_paren: yes
        align_when_keywords: yes
        severity: Error
        wrap_at_when: yes

    concurrent_010:
        # This rule checks the structure of simple and conditional concurrent statements.
        action: remove

    concurrent_011:
        ignore_single_line: yes
        new_line_after_assign: no

    concurrent_012:
        # This rule checks the structure of multiline concurrent simple signal assignments that contain arrays.
        assign_on_single_line: no
        close_paren_new_line: no
        first_paren_new_line: no
        ignore_single_line: yes
        last_paren_new_line: no
        new_line_after_comma: yes
        open_paren_new_line: no

    concurrent_400:
        # This rule checks the alignment the => operator in record aggregates.
        aggregate_parens_ends_group: yes
        blank_line_ends_group: yes
        comment_line_ends_group: yes
        compact_alignment: yes
        ignore_single_line_aggregates: yes
        severity: Error

    concurrent_401:
        # This rule checks the alignment of multiline concurrent simple signal assignments that contain arrays.
        align_left: no
        align_paren: yes
        disable: false
        severity: Error

    # ---------------------------------------------------------------------------------------------
    # Conditional Rules
    # ---------------------------------------------------------------------------------------------

    conditional_expressions_100:
        # This rule checks for a single space before the when keyword.
        number_of_spaces: ">=1"

    conditional_expressions_101:
        # This rule checks for a single space after the when keyword.
        number_of_spaces: 1

    conditional_expressions_102:
        # This rule checks for a single space before the else keyword.
        number_of_spaces: ">=1"

    conditional_expressions_103:
        # This rule checks for a single space after the else keyword.
        number_of_spaces: 1

    conditional_expressions_500:
        # This rule checks the when keyword has proper case.
        case: lower

    conditional_expressions_501:
        # This rule checks the else keyword has proper case.
        case: lower

    conditional_waveforms_001:
        # This rule checks for code after the else keyword.
        allow_single_line: no

    conditional_waveforms_100:
        # This rule checks for a single space before the when keyword.
        number_of_spaces: ">=1"

    conditional_waveforms_101:
        # This rule checks for a single space after the when keyword.
        number_of_spaces: 1

    conditional_waveforms_102:
        # This rule checks for a single space before the else keyword.
        number_of_spaces: ">=1"

    conditional_waveforms_103:
        # This rule checks for a single space after the else keyword.
        number_of_spaces: 1

    conditional_waveforms_500:
        # This rule checks the when keyword has proper case.
        case: lower

    conditional_waveforms_501:
        # This rule checks the else keyword has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Constant Rules
    # ---------------------------------------------------------------------------------------------

    constant_001:
        # This rule checks the indent of a constant declaration.
        phase: 4

    constant_002:
        # This rule checks the constant keyword has proper case.
        case: lower

    constant_004:
        # This rule checks the constant identifier has proper case.
        case: upper
        fixable: true

    constant_005:
        # This rule checks for a single space after the colon.
        number_of_spaces: 1

    constant_006:
        # This rule checks for at least a single space before the colon.
        number_of_spaces: ">=1"

    constant_007:
        # This rule checks the := is on the same line at the constant keyword.
        align: yes

    constant_010:
        # This rule checks for a single space before the := keyword in constant declarations. Having a space makes it clearer where the assignment occurs on the line.
        number_of_spaces: ">=1"

    constant_012:
        # This rule checks the alignment of multiline constants that contain arrays.
        align_left: no
        align_paren: yes
        disable: false
        phase: 5
        severity: Error

    constant_013:
        # This rule checks for consistent capitalization of constant names.
        case: upper

    constant_014:
        # This rule checks the indent of multiline constants that do not contain arrays.
        disable: false
        align_left: no
        align_paren: yes
        severity: Error

    constant_015:
        # This rule checks for valid prefixes on constant identifiers.
        disable: false
        exceptions: []
        fixable: false
        prefixes: ["C_"]
        severity: Error

    constant_016:
        # This rule checks the structure of multiline constants that contain arrays.
        first_paren_new_line: yes
        last_paren_new_line: yes
        open_paren_new_line: yes
        close_paren_new_line: yes
        new_line_after_comma: yes
        assign_on_single_line: yes
        ignore_single_line: no
        severity: Error

    constant_017:
        # This rule checks the structure of constant constraints.
        array_constraint: all_in_one_line
        exceptions: []
        record_constraint_close_paren: add_new_line
        record_constraint_comma: add_new_line
        record_constraint_element: add_new_line
        record_constraint_open_paren: add_new_line

    constant_100:
        # This rule checks for a single space after the := assignment in constant declarations. Having a space makes it clearer where the assignment occurs on the line.
        number_of_spaces: 1

    constant_101:
        # This rule checks for a single space before the identifier.
        number_of_spaces: 1

    constant_200:
        # This rule checks for a blank line below a constant declaration unless there is another constant definition.
        severity: Error
        style: require_blank_line
        disable: false

    constant_400:
        # This rule checks the alignment of assignment keywords in constant declarations.
        aggregate_parens_ends_group: yes
        blank_line_ends_group: yes
        comment_line_ends_group: yes
        compact_alignment: yes
        disable: false
        fixable: false
        ignore_single_line_aggregates: yes
        severity: Error

    # ---------------------------------------------------------------------------------------------
    # Constrained Array Definition Rules
    # ---------------------------------------------------------------------------------------------

    constrained_array_definition_500:
        # This rule checks the array keyword has proper case.
        case: lower

    constrained_array_definition_501:
        # This rule checks the of keyword has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Context Rules
    # ---------------------------------------------------------------------------------------------

    context_001:
        # This rule checks the indent of the context keyword.
        phase: 4

    context_002:
        # This rule checks for a single space between the context keyword and the context identifier.
        number_of_spaces: 1

    context_003:
        # This rule checks for blank lines or comments above the context keyword.
        style: no_code

    context_004:
        # This rule checks the context keyword has proper case.
        case: lower

    context_005:
        # This rule checks the context identifier is on the same line as the context keyword.
        action: same_line

    context_006:
        # This rule checks the is keyword is on the same line as the context identifier.
        action: same_line

    context_007:
        # This rule checks for code after the is keyword.
        style: no_code

    context_008:
        # This rule checks the end keyword is on its own line.
        action: new_line

    context_009:
        # This rule checks the context keyword is on the same line as the end context keyword.
        action: same_line

    context_010:
        # This rule checks the context identifier is on the same line as the end context keyword.
        action: same_line

    context_011:
        # This rule checks the semicolon is on the same line as the end keyword.
        action: same_line

    context_012:
        # This rule checks the context identifier has proper case in the context declaration.
        case: lower

    context_013:
        # This rule checks the is keyword has proper case in the context declaration.
        case: lower

    context_014:
        # This rule checks the end keyword has proper case.
        case: lower

    context_015:
        # This rule checks the context keyword has proper case in the end context declaration.
        case: lower

    context_016:
        # This rule checks the context identifier has proper case in the end context declaration.
        case: lower

    context_017:
        # This rule checks for a single space between the context identifier and the is keyword.
        number_of_spaces: 1

    context_018:
        # This rule checks for a single space between the end keyword and the context keyword.
        number_of_spaces: 1

    context_019:
        # This rule checks for a single space between the context keyword and the context identifier.
        number_of_spaces: 1

    context_020:
        # This rule checks the indent of the end keyword.
        phase: 4

    context_021:
        # This rule checks for the keyword context in the end context statement.
        action: add

    context_022:
        # This rule checks for the context name in the end context statement.
        action: add

    context_023:
        # This rule adds a blank line below the is keyword.
        style: require_blank_line

    context_024:
        # This rule checks for blank lines or comments above the end keyword.
        style: no_code

    context_025:
        # This rule adds a blank line below the context semicolon.
        style: require_blank_line

    context_ref_001:
        # This rule checks the indent of the context keyword.
        phase: 4
        severity: Error

    context_ref_002:
        # This rule checks for a single space between the context keyword and the context selected name.
        number_of_spaces: 1
        phase: 2
        severity: Error

    context_ref_003:
        # This rule checks the context keyword has proper case.
        case: lower
        phase: 6
        severity: Error

    context_ref_005:
        # This rule checks the context keyword is on its own line.
        structure: own_line
        phase: 1
        severity: Error

    context_ref_500:
        # This rule checks the library name called out in the selected name has proper case.
        case: lower
        phase: 6
        severity: Error

    context_ref_501:
        # This rule checks the context name called out in the selected name has proper case.
        case: lower
        phase: 6
        severity: Error

    # ---------------------------------------------------------------------------------------------
    # Declarative Rule
    # ---------------------------------------------------------------------------------------------

    declarative_part_400:
        # This rule checks the alignment of the := operator in the declarative part.
        aggregate_parens_ends_group: no
        blank_line_ends_group: yes
        case_control_statements_ends_group: no
        comment_line_ends_group: yes
        compact_alignment: yes
        generate_statements_ends_group: no
        if_control_statements_ends_group: no
        ignore_single_line_aggregates: no
        loop_control_statements_ends_group: no
        separate_generic_port_alignment: yes

    # ---------------------------------------------------------------------------------------------
    # Element Association Rules
    # ---------------------------------------------------------------------------------------------

    element_association_100:
        # This rule checks for a single space between the others keyword and the => in an element_association.
        number_of_spaces: 1

    element_association_101:
        # This rule checks for a single space after the => in an element_association.
        number_of_spaces: 1

    # ---------------------------------------------------------------------------------------------
    # Entities Rules
    # ---------------------------------------------------------------------------------------------

    entity_001:
        # This rule checks the indent of the entity keyword.
        phase: 4

    entity_002:
        # This rule checks for a single space after the entity keyword.
        number_of_spaces: 1

    entity_003:
        # This rule checks for blank lines or comments above the entity keyword.
        style: allow_comment

    entity_004:
        # This rule checks the entity keyword has proper case.
        case: lower

    entity_005:
        # This rule checks the is keyword is on the same line as the entity keyword.
        action: same_line

    entity_006:
        # This rule checks the is keyword has proper case in the entity declaration.
        case: lower

    entity_007:
        # This rule checks for a single space before the is keyword.
        number_of_spaces: 1

    entity_008:
        # This rule checks the entity name has proper case in the entity declaration.
        case: upper
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    entity_009:
        # This rule checks the indent of the end keyword.
        phase: 4

    entity_010:
        # This rule checks the end keyword has proper case.
        case: lower

    entity_011:
        # This rule checks for a single space after the end keyword.
        number_of_spaces: 1

    entity_012:
        # This rule checks the case of the entity name in the end entity statement.
        case: upper
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    entity_013:
        # This rule checks for a single space after the entity keyword in the closing of the entity declaration.
        number_of_spaces: 1

    entity_014:
        # This rule checks the entity keyword has proper case in the closing of the entity declaration.
        case: lower

    entity_015:
        # This rule checks for the keyword entity in the end entity statement.
        action: add

    entity_016:
        # This rule checks for blank lines above the end entity keywords.
        style: no_blank_line

    entity_017:
        # This rule checks the alignment of the colon for each generic and port in the entity declaration.
        blank_line_ends_group: no
        comment_line_ends_group: no
        compact_alignment: yes
        separate_generic_port_alignment: yes

    entity_018:
        # This rule checks the alignment of := operator for each generic and port in the entity declaration.
        blank_line_ends_group: no
        comment_line_ends_group: no
        compact_alignment: yes
        separate_generic_port_alignment: yes

    entity_019:
        # This rule checks for the entity name in the end entity statement.
        action: add

    entity_020:
        # This rule checks for alignment of inline comments in the entity declaration.
        blank_line_ends_group: yes
        comment_line_ends_group: yes
        compact_alignment: yes
        disable: false
        fixable: true
        include_lines_without_comments: no
        separate_generic_port_alignment: yes

    entity_021:
        # This rule checks the end keyword is on its own line.
        action: new_line

    entity_022:
        # This rule checks the identifier is on the same line as the entity keyword.
        action: same_line

    entity_023:
        # This rule checks the end entity keyword is on the same line as the end keyword.
        action: same_line

    entity_024:
        # This rule checks the end entity simple name is not on its own line.
        action: same_line

    entity_025:
        # This rule checks the semicolon is not on its own line.
        action: same_line

    entity_026:
        # This rule checks for code after the is keyword.
        action: new_line

    entity_027:
        # This rule checks for code after the begin keyword.
        action: new_line

    entity_028:
        # This rule checks for code after the semicolon.
        action: new_line

    entity_029:
        # This rule checks the begin keyword is on its own line.
        action: new_line

    entity_200:
        # This rule checks for blank lines above the generic keyword in entity specifications.
        style: no_blank_line

    entity_201:
        # This rule checks for blank lines above the port keyword in entity specifications.
        action: no_blank_line

    entity_202:
        # This rule checks for blank lines above the port keyword in entity specifications.
        style: no_blank_line

    entity_203:
        # This rule checks for blank lines below the semicolon in entity specifications.
        style: require_blank_line

    entity_300:
        # This rule checks the indent of the begin keyword.
        phase: 4

    entity_500:
        # This rule checks the begin keyword has proper case.
        case: lower

    entity_600:
        # This rule checks for consistent capitalization of generic names in entity declarations.
        case: upper

    entity_specification_100:
        # This rule checks for a single space after the colon.
        number_of_spaces: 1

    entity_specification_101:
        # This rule checks for at least a single space before the colon.
        number_of_spaces: ">=1"

    entity_specification_500:
        # This rule checks the others keyword has proper case.
        case: lower

    entity_specification_501:
        # This rule checks the all keyword has proper case.
        case: lower

    entity_specification_503:
        # This rule checks the entity_class has proper case.
        case: lower
        case_exceptions: []

    # ---------------------------------------------------------------------------------------------
    # Exponent Rules
    # ---------------------------------------------------------------------------------------------

    exponent_500:
        # This rule checks the exponent has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # File Rules
    # ---------------------------------------------------------------------------------------------

    file_001:
        # This rule checks the indent of file declarations.
        phase: 4

    file_002:
        # This rule checks the file keyword has proper case.
        case: lower

    file_100:
        # This rule checks for a single space before the identifier.
        number_of_spaces: 1
        severity: Error

    file_500:
        # This rule checks the file identifier has proper case.
        case: lower

    file_open_information_500:
        # This rule checks the open keyword has proper case.
        case: lower

    file_open_information_501:
        # This rule checks the file open kind expression has proper case.
        case: lower

    file_open_information_502:
        # This rule checks the is keyword has proper case.
        case: lower

    file_type_definition_500:
        # This rule checks the file keyword has proper case.
        case: lower

    file_type_definition_501:
        # This rule checks the of keyword has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # For Generate Statement Rules
    # ---------------------------------------------------------------------------------------------

    for_generate_statement_500:
        # This rule checks the for keyword has proper case.
        case: lower

    for_generate_statement_501:
        # This rule checks the generate keyword has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Function Rules
    # ---------------------------------------------------------------------------------------------

    function_001:
        # This rule checks the indentation of the function keyword.
        phase: 4

    function_004:
        # This rule checks the begin keyword has proper case.
        case: lower

    function_005:
        # This rule checks the function keyword has proper case.
        case: lower

    function_006:
        # This rule checks for blank lines or comments above the function keyword.
        disable: true # Unhandy for multiple consecutive function declarations (e.g. in packages)

    function_008:
        # This rule checks the indent of function parameters on multiple lines.
        phase: 4

    function_010:
        # This rule checks for consistent capitalization of function names.
        case: lower

    function_012:
        # This rule checks the colons are in the same column for all declarations in the function declarative part.
        blank_line_ends_group: no
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: yes

    function_013:
        # This rule checks the end keyword has proper case.
        case: lower

    function_015:
        # This rule checks the identifiers for all declarations are aligned in the function declarative part.
        blank_line_ends_group: no
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: yes
        severity: Error

    function_016:
        # This rule checks the indent of return statements in function bodies.
        phase: 4

    function_017:
        # This rule checks the function designator has proper case.
        disable: true
        case: upper

    function_018:
        # This rule checks the function keyword exist in the closing of the function specification.
        action: add

    function_019:
        # This rule checks the structure of function specifications.
        first_open_paren: remove_new_line
        ignore_single_line: yes
        interface_element: add_new_line
        interface_list_semicolon: remove_new_line
        last_close_paren: remove_new_line

    function_020:
        # This rule checks the function designator exists in the closing of the function specification.
        action: remove

    function_100:
        # This rule checks for a single space between the following function elements: function keyword, function designator, open parenthesis, close parenthesis, return keyword, return type and is keyword.
        number_of_spaces: 1

    function_101:
        # This rule checks for a single space between the end and function keywords and function designator.
        number_of_spaces: 1

    function_300:
        # This rule checks the indent of the closing parenthesis if it is on its own line.
        phase: 4

    function_501:
        # This rule checks the return keyword has proper case.
        case: lower

    function_502:
        # This rule checks the is keyword has proper case.
        case: lower

    function_506:
        # This rule checks the function designator has proper case on the end function declaration.
        case: camelCase
        case_exceptions: []
        fixable: false
        prefix_exceptions: []
        suffix_exceptions: []

    function_507:
        # This rule checks that the parameter names have proper case.
        case: lower

    function_508:
        # This rule checks for consistent capitalization of parameter names within the subprogram body.
        case: lower

    function_509:
        # This rule checks the pure keyword has proper case.
        case: lower

    function_510:
        # This rule checks the parameter direction has proper case.
        case: lower

    function_511:
        # This rule checks the parameter class has proper case.
        case: lower

    function_512:
        # This rule checks the impure keyword has proper case.
        case: lower

    function_600:
        # This rule checks for valid prefixes on function designators. Default signal prefix is f_.
        disable: true
        exceptions: []
        fixable: false
        prefixes: ["F_"]
        severity: Error

    function_601:
        # This rule checks for valid suffixes on function designators. Default signal suffix is _f.
        disable: true
        exceptions: []
        fixable: false
        severity: Error
        suffixes: ["_f"]

    # ---------------------------------------------------------------------------------------------
    # Generate Statement Rules
    # ---------------------------------------------------------------------------------------------

    generate_001:
        # This rule checks the indent of the generate declaration.
        phase: 4

    generate_002:
        # This rule checks for a single space between the label and the colon.
        number_of_spaces: 1

    generate_003:
        # This rule checks for a blank line below the end generate keywords.
        style: require_blank_line

    generate_004:
        # This rule checks for blank lines or comments before the generate label.
        style: allow_comment

    generate_005:
        # This rule checks the generate label has proper case.
        case: lower
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    generate_006:
        # This rule checks the indent of the begin keyword.
        phase: 4

    generate_007:
        # This rule checks the indent of the end generate keyword.
        phase: 4

    generate_008:
        # This rule checks for a single space after the end keyword.
        number_of_spaces: 1

    generate_009:
        # This rule checks the end keyword has proper case.
        case: lower

    generate_010:
        # This rule checks the generate keyword has the proper case in the end generate line.
        case: lower

    generate_011:
        # This rule checks the end generate label on for, case and if generate statements.
        action: add

    generate_012:
        # This rule checks the end generate label has proper case.
        case: lower
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    generate_013:
        # This rule checks for a single space after the generate keyword and the label in the end generate keywords.
        number_of_spaces: 1

    generate_014:
        # This rule checks for a single space between the colon and the for keyword.
        number_of_spaces: 1

    generate_016:
        # This rule checks the indent of the when keyword in generate case statements.
        phase: 4

    generate_017:
        # This rule checks for valid prefixes on generate statement labels. The default prefix is gen_.
        disable: false
        exceptions: []
        prefixes: ["g_", "gen_"]

    generate_018:
        # This rule checks the indent of the end keyword in the generate statement body.
        phase: 4

    generate_019:
        # This rule checks the end keyword is on its own line.
        action: new_line

    generate_020:
        # This rule checks a label and the colon are on the same line.
        action: same_line

    generate_021:
        # This rule checks a label colon is on the same line as the **case**, **if**, and **for** keywords.
        action: same_line

    generate_400:
        # This rule checks the identifiers for all declarations are aligned in the generate declarative part in for generate statements.
        blank_line_ends_group: no
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        severity: Error

    generate_401:
        # This rule checks the colons are in the same column for all declarations in the generate declarative part in for generate statements.
        blank_line_ends_group: no
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes

    generate_402:
        # This rule checks the identifiers for all declarations are aligned in the generate declarative part in if generate statements.
        blank_line_ends_group: no
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes

    generate_403:
        # This rule checks the colons are in the same column for all declarations in the generate declarative part in if generate statements.
        blank_line_ends_group: no
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes

    generate_404:
        # This rule checks the identifiers for all declarations are aligned in the generate declarative part in case generate statements.
        blank_line_ends_group: no
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes

    generate_405:
        # This rule checks the colons are in the same column for all declarations in the generate declarative part in case generate statements.
        blank_line_ends_group: no
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes

    generate_500:
        # This rule checks the begin keyword has the proper case.
        case: lower

    generate_501:
        # This rule checks the end keyword has the proper case.
        case: lower

    generate_600:
        # This rule checks for valid suffixes on generate statement labels. The default suffix is _gen.
        disable: true
        exceptions: []
        fixable: false
        severity: Error
        suffixes: []

    generate_601:
        # This rule checks for valid prefixes on generate parameter identifiers. The default generate prefix is gv_.
        disable: true
        exceptions: []
        fixable: false
        prefixes: []
        severity: Error

    generate_602:
        # This rule checks for valid suffixes on generate parameter identifiers. The default generate suffix is _gv.
        disable: true
        exceptions: []
        fixable: false
        severity: Error
        suffixes: []

    # ---------------------------------------------------------------------------------------------
    # Generics Rules
    # ---------------------------------------------------------------------------------------------

    generic_002:
        # This rule checks the indent of the generic keyword.
        phase: 4

    generic_003:
        # This rule checks for a single space between the generic keyword and the (.
        number_of_spaces: 1

    generic_004:
        # This rule checks the indent of generic declarations.
        indent: 6

    generic_005:
        # This rule checks for a single space after the colon in a generic declaration.
        number_of_spaces: 1

    generic_006:
        # This rule checks for a single space after the default assignment.
        number_of_spaces: 1

    generic_007:
        # This rule checks the generic names have proper case.
        case: upper
        fixable: true

    generic_008:
        # This rule checks the indent of the closing parenthesis.
        phase: 4

    generic_009:
        # This rule checks the generic keyword has proper case.
        case: lower

    generic_010:
        # This rule checks the location of the closing ) character for the generic clause.
        action: new_line

    generic_013:
        # This rule checks for the generic keyword on the same line as a generic declaration.
        action: new_line

    generic_014:
        # This rule checks for at least a single space before the colon.
        number_of_spaces: ">=1"

    generic_016:
        # This rule checks for multiple generics defined on a single line.
        action: new_line

    generic_018:
        # This rule checks the generic keyword is on the same line as the (.
        action: same_line

    generic_019:
        # This rule checks for blank lines before the ); of the generic declaration.
        action: new_line

    generic_020:
        # This rule checks for valid prefixes on generic identifiers. The default generic prefix is g_.
        disable: false
        prefixes: ["G_"]
        exceptions: ["RUNNER_CFG"]
        severity: Error

    generic_021:
        # This rule checks the semicolon is not on its own line.
        action: same_line

    generic_map_001:
        # This rule checks the generic map keywords have proper case.
        case: lower

    generic_map_002:
        # This rule checks generic names have proper case.
        case: upper
        fixable: true
        prefix_exceptions: ["G_"]
        suffix_exceptions: []
        severity: Error

    generic_map_003:
        # This rule checks the ( is on the same line as the generic map keywords.
        action: same_line

    generic_map_004:
        # This rule checks the location of the closing ) character for the generic map.
        action: new_line

    generic_map_005:
        # This rule checks if the generic map keywords and a generic assignment are on the same line.
        action: new_line

    generic_map_006:
        # This rule checks for a single space between the map keyword and the (.
        number_of_spaces: 1

    generic_map_007:
        # This rule checks for a single space after the => keyword in generic maps.
        number_of_spaces: 1

    generic_map_008:
        # This rule checks for positional generics. Positional ports and generics are subject to problems when the position of the underlying component changes.
        new_line_after_assign: yes
        ignore_single_line: yes

    generic_map_100:
        # This rule checks for at least a single space before the **=>** keyword in generic maps.
        number_of_spaces: ">=1"

    generic_map_600:
        # This rule checks for valid suffixes on generic identifiers in generic maps The default generic suffix is _g.
        exceptions: []
        disable: true
        suffixes: []
        severity: Error

    generic_map_601:
        # This rule checks for valid prefixes on generic identifiers in generic maps The default generic suffix is g_.
        exceptions: []
        disable: false
        phase: 7
        prefixes: ["g_", ""]
        severity: Error

    # ---------------------------------------------------------------------------------------------
    # If/Else Rules
    # ---------------------------------------------------------------------------------------------

    if_001:
        # This rule checks the indent of the if keyword.
        phase: 4

    if_002:
        # This rule checks the boolean expression is enclosed in ().
        disable: false
        fixable: true
        parenthesis: insert

    if_003:
        # This rule checks for a single space between the if keyword and the (.
        number_of_spaces: 1

    if_004:
        # This rule checks for a single space between the ) and the then keyword.
        number_of_spaces: 1

    if_005:
        # This rule checks for a single space after the elsif keyword.
        fixable: false
        number_of_spaces: 1

    if_006:
        # This rule checks for blank lines after the then keyword.
        disable: true
        fixable: false

    if_007:
        # This rule checks for blank lines before the elsif keyword.
        disable: true
        fixable: false

    if_008:
        # This rule checks for blank lines before the end if keywords.
        disable: true
        fixable: false

    if_009:
        # This rule checks the alignment of multiline boolean expressions.
        align_left: no
        align_paren: yes

    if_010:
        # This rule checks for blank lines before the else keyword.
        disable: true
        fixable: false

    if_011:
        # This rule checks for blank lines after the else keyword.
        disable: true
        fixable: false

    if_012:
        # This rule checks the indent of the elsif keyword.
        phase: 4

    if_013:
        # This rule checks the indent of the else keyword.
        phase: 4

    if_014:
        # This rule checks the indent of the end if keyword.
        phase: 4

    if_015:
        # This rule checks for a single space between the end if keywords.
        number_of_spaces: 1

    if_020:
        # This rule checks the end if keyword is on its own line.
        action: new_line

    if_021:
        # This rule checks the else keyword is on its own line.
        action: new_line

    if_022:
        # This rule checks for code after the else keyword.
        action: new_line

    if_023:
        # This rule checks the elsif keyword is on its own line.
        action: new_line

    if_024:
        # This rule checks for code after the then keyword.
        action: new_line

    if_025:
        # This rule checks the if keyword has proper case.
        case: lower

    if_026:
        # This rule checks the elsif keyword has proper case.
        case: lower

    if_027:
        # This rule checks the else keyword has proper case.
        case: lower

    if_028:
        # This rule checks the end keyword has proper case.
        case: lower

    if_029:
        # This rule checks the then keyword has proper case.
        case: lower

    if_030:
        # This rule checks a single blank line after the end if. In the case of nested if statements, the rule will be enfoced on the last end if.
        disable: false
        style: require_blank_line
        severity: Error

    if_031:
        # This rule checks for blank lines or comments above the if keyword. In the case of nested if statements, the rule will be enfoced on the first if.
        disable: false
        style: no_code
        severity: Error

    if_034:
        # This rule checks the if keyword in the end if has proper case.
        case: lower

    if_035:
        # This rule checks the expression after the if or elsif keyword starts on the same line.
        action: new_line

    if_036:
        # This rule checks the then keyword is not on a line by itself.
        action: same_line

    if_generate_statement_300:
        # This rule checks the indent of the elsif keyword.
        phase: 4

    if_generate_statement_301:
        # This rule checks the indent of the else keyword.
        phase: 4

    if_generate_statement_500:
        # This rule checks the if keyword has proper case.
        case: lower

    if_generate_statement_501:
        # This rule checks the generate keyword has proper case.
        case: lower

    if_generate_statement_502:
        # This rule checks the elsif keyword has proper case.
        case: lower

    if_generate_statement_503:
        # This rule checks the else keyword has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Index Subtype Definition Rules
    # ---------------------------------------------------------------------------------------------

    index_subtype_definition_500:
        # This rule checks the range keyword in index subtype definitions has the proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Instantiation Rules
    # ---------------------------------------------------------------------------------------------

    instantiation_002:
        # This rule checks for a single space after the colon.
        number_of_spaces: 1

    instantiation_003:
        # This rule checks for a single space before the colon.
        number_of_spaces: 1

    instantiation_004:
        # This rule checks for blank lines or comments above the instantiation.
        style: allow_comment
        severity: Error

    instantiation_005:
        # This rule checks the port map keywords are on their own line.
        action: new_line

    instantiation_008:
        # This rule checks the instance label has proper case.
        fixable: false
        disable: true
        case: upper
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    instantiation_009:
        # This rule checks the component name has proper case.
        case: lower
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    instantiation_010:
        # This rule checks the alignment of the => operator for each generic and port in the instantiation.
        blank_line_ends_group: no
        comment_line_ends_group: no
        compact_alignment: yes
        separate_generic_port_alignment: yes

    instantiation_012:
        # This rule checks the instantiation declaration and the generic map keywords are not on the same line.
        action: new_line

    instantiation_019:
        # This rule checks for a blank line below the end of the instantiation declaration.
        style: require_blank_line
        severity: Error

    instantiation_027:
        # This rule checks the entity keyword has proper case in direct instantiations.
        case: lower

    instantiation_028:
        # This rule checks the entity name has proper case in direct instantiations.
        case: lower
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    instantiation_029:
        # This rule checks for alignment of inline comments in an instantiation.
        blank_line_ends_group: yes
        comment_line_ends_group: yes
        compact_alignment: yes
        include_lines_without_comments: no
        separate_generic_port_alignment: yes

    instantiation_031:
        # This rule checks the component keyword has proper case in component instantiations that use the component keyword.
        case: lower

    instantiation_032:
        # This rule checks for a single space after the component keyword if it is used.
        number_of_spaces: 1

    instantiation_033:
        # This rule checks for the component keyword for a component instantiation.
        action: add

    instantiation_034:
        # This rule checks for component versus direct instantiations.
        disable: true
        fixable: false
        method: component
        severity: Error

    instantiation_035:
        # This rule checks the semicolon is not on its own line.
        action: same_line

    instantiation_600:
        # This rule checks for valid suffixes on instantiation labels. The default suffix is _inst.
        disable: true
        exceptions: []
        fixable: false
        severity: Error
        suffixes: []

    instantiation_601:
        # This rule checks for valid prefixes on instantiation labels. The default prefix is inst_.
        exceptions: ["DUT"]
        prefixes: ["inst_"]

    # ---------------------------------------------------------------------------------------------
    # Iteration Scheme Rules
    # ---------------------------------------------------------------------------------------------

    iteration_scheme_100:
        # This rule checks that a single space exists after the while keyword.
        number_of_spaces: 1

    iteration_scheme_101:
        # This rule checks that a single space exists after the for keyword.
        number_of_spaces: 1

    iteration_scheme_300:
        # This rule checks for indentation of the while keyword. Proper indentation enhances comprehension.
        phase: 4

    iteration_scheme_301:
        # This rule checks for indentation of the for keyword. Proper indentation enhances comprehension.
        phase: 4

    iteration_scheme_500:
        # This rule checks the while keyword has proper case.
        case: lower

    iteration_scheme_501:
        # This rule checks the for keyword has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Length Rules
    # ---------------------------------------------------------------------------------------------

    length_001:
        length: 120
        severity: Warning

    length_002:
        # This rule checks the length of a file.
        length: 2000
        severity: Warning

    length_003:
        # This rule checks the length of a process statement.
        disable: true

    # ---------------------------------------------------------------------------------------------
    # Library Rules
    # ---------------------------------------------------------------------------------------------

    library_001:
        # This rule checks the indent of the library keyword. Indenting helps in comprehending the code.
        phase: 4

    library_002:
        # This rule checks for excessive spaces after the library keyword.
        number_of_spaces: 1

    library_003:
        # This rule checks for blank lines or comments above the library keyword.
        allow_library_clause: yes
        style: allow_comment

    library_004:
        # This rule checks the library keyword has proper case.
        case: lower

    library_005:
        # This rule checks the use keyword has proper case.
        case: lower

    library_006:
        # This rule checks for excessive spaces after the use keyword.
        number_of_spaces: 1

    library_007:
        # This rule checks for blank lines or comments above the use declaration.
        style: no_blank_line_unless_different_library

    library_008:
        # This rule checks the indent of the use keyword.
        phase: 4

    library_009:
        # This rule checks alignment of comments above library use statements.
        blank_line_ends_group: no
        comment_line_ends_group: no
        compact_alignment: yes

    library_010:
        # This rule checks the library keyword is on its own line.
        action: new_line

    library_011:
        # This rule checks the use keyword is on its own line.
        action: new_line

    library_500:
        # This rule checks the logical_name in a library_clause has proper case.
        case: lower
        case_exceptions: []

    # ---------------------------------------------------------------------------------------------
    # Logical Operator Rules
    # ---------------------------------------------------------------------------------------------

    logical_operator_500:
        # This rule checks logical operators have proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Loop Rules
    # ---------------------------------------------------------------------------------------------

    loop_statement_001:
        # This rule checks for code after the loop keyword.
        action: new_line

    loop_statement_002:
        # This rule checks the end keyword is on its own line.
        action: new_line

    loop_statement_003:
        # This rule checks the end keyword is on the same line as the end loop keyword.
        action: same_line

    loop_statement_004:
        # This rule checks the semicolon is on the same line as the end loop keyword.
        action: same_line

    loop_statement_005:
        # This rule checks the loop label and the while, for or loop keywords are on the same line.
        action: same_line

    loop_statement_006:
        # This rule checks that loop statements have a label.
        disable: true
        fixable: false
        severity: Warning

    loop_statement_007:
        # This rule checks the end loop_statement line has a label. The closing label will be added if the opening loop_statement label exists.
        action: add
        fixable: true
        phase: 1

    loop_statement_100:
        # This rule checks that a single space exists between the end and loop keywords
        number_of_spaces: 1

    loop_statement_101:
        # This rule checks for a single space before the ending loop label if it exists.
        number_of_spaces: 1

    loop_statement_102:
        # This rule checks for a single space before the loop keyword.
        number_of_spaces: 1

    loop_statement_103:
        # This rule checks if a label exists that a single space exists between the label and the colon.
        number_of_spaces: 1

    loop_statement_104:
        # This rule checks if a label exists that a single space exists after the colon.
        number_of_spaces: 1

    loop_statement_200:
        # This rule checks for blank lines or comments above loop statements.
        style: allow_comment
        severity: Error

    loop_statement_201:
        # This rule checks for blank lines below the loop keyword.
        disable: true
        style: no_blank_line
        severity: Error

    loop_statement_202:
        # This rule checks for blank lines or comments above the end keyword.
        disable: true
        style: no_code
        severity: Error

    loop_statement_203:
        # This rule checks for blank lines below the end loop keywords.
        style: require_blank_line
        severity: Error

    loop_statement_300:
        # This rule checks the indentation of the loop keyword.
        phase: 4

    loop_statement_301:
        # This rule checks the indentation of the loop label if it exists.
        phase: 4

    loop_statement_302:
        # This rule checks the indentation of the end keyword.
        phase: 4

    loop_statement_500:
        # This rule checks the loop keyword has proper case.
        case: lower

    loop_statement_501:
        # This rule checks the end keyword has proper case.
        case: lower

    loop_statement_502:
        # This rule checks the loop keyword has proper case.
        case: lower

    loop_statement_503:
        # This rule checks the proper case of the label on a loop statement.
        case: lower
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    loop_statement_504:
        # This rule checks the proper case of the end label on a loop statement.
        case: lower
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    loop_statement_600:
        # This rule checks for valid prefixes on loop labels. The default prefix is loop_.
        exceptions: []
        prefixes: ["l_"]
        severity: Error

    loop_statement_601:
        # This rule checks for valid suffixes on loop labels. The default prefix is _loop.
        disable: true
        exceptions: []
        fixable: false
        severity: Error
        suffixes: ["_loop"]

    loop_statement_602:
        # This rule checks for valid prefixes on loop parameter identifiers. The default loop prefix is lv_.
        disable: true
        exceptions: []
        fixable: false
        prefixes: ["lv_"]
        severity: Error

    loop_statement_603:
        # This rule checks for valid suffixes on loop parameter identifiers. The default loop suffix is _lv.
        disable: true
        exceptions: []
        fixable: false
        severity: Error
        suffixes: ["_lv"]

    # ---------------------------------------------------------------------------------------------
    # Next Statement Rules
    # ---------------------------------------------------------------------------------------------

    next_statement_300:
        # This rule checks the indentation of the next keyword.
        phase: 4

    next_statement_301:
        # This rule checks the indentation of the label.
        phase: 4

    next_statement_500:
        # This rule checks the next keyword has proper case.
        case: lower

    next_statement_501:
        # This rule checks the when keyword has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Package Rules
    # ---------------------------------------------------------------------------------------------

    package_001:
        # This rule checks the indent of the package declaration.
        phase: 4

    package_002:
        # This rule checks for a single space between package and is keywords.
        number_of_spaces: 1

    package_003:
        # This rule checks for blank lines or comments above the package keyword.
        style: allow_comment

    package_004:
        # This rule checks the package keyword has proper case.
        case: lower

    package_005:
        # This rule checks the is keyword is on the same line as the package keyword.
        action: same_line

    package_006:
        # This rule checks the end keyword has proper case.
        case: lower

    package_007:
        # This rule checks for the package keyword on the end package declaration.
        action: add

    package_008:
        # This rule checks the package name has proper case on the end package declaration.
        case: lower
        disable: true
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    package_009:
        # This rule checks for a single space between the end and package keywords and package name.
        number_of_spaces: 1

    package_010:
        # This rule checks the package name has proper case in the package declaration.
        case: lower
        disable: true
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    package_011:
        # This rule checks for a blank line below the package keyword.
        style: require_blank_line

    package_012:
        # This rule checks for blank lines or comments above the end package keyword.
        style: require_blank_line

    package_013:
        # This rule checks the is keyword has proper case.
        case: lower
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    package_014:
        # This rule checks the package name exists on the same line as the end package keywords.
        action: add

    package_015:
        # This rule checks the indent of the end package declaration.
        phase: 4

    package_016:
        # This rule checks for valid suffixes on package identifiers. The default package suffix is _pkg.
        disable: False
        exceptions: []
        fixable: false
        severity: Warning
        suffixes: ["_pkg", "_pck"]

    package_017:
        # This rule checks for valid prefixes on package identifiers. The default package prefix is pkg_.
        disable: True
        exceptions: []
        fixable: false
        prefixes: [pkg_]
        severity: Warning

    package_018:
        # This rule checks the package keyword in the end package has proper case.
        case: lower

    package_019:
        # This rule checks the identifiers for all declarations are aligned in the package declarative region.
        blank_line_ends_group: no
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: no
        include_type_is_keyword: no
        loop_control_statements_ends_group: no
        fixable: true
        disable: true

    package_400:
        # This rule checks the colons are in the same column for all declarations in the package declarative part.
        blank_line_ends_group: no
        case_control_statements_ends_group: no
        comment_line_ends_group: yes
        compact_alignment: yes
        if_control_statements_ends_group: no
        include_type_is_keyword: no
        loop_control_statements_ends_group: no

    package_401:
        # This rule checks the alignment of inline comments in the package declarative part.
        blank_line_ends_group: no
        case_control_statements_ends_group: no
        comment_line_ends_group: yes
        compact_alignment: yes
        if_control_statements_ends_group: no
        include_type_is_keyword: no
        loop_control_statements_ends_group: no

    package_402:
        # This rule checks the colons are in the same column for all attribute specifications.
        blank_line_ends_group: no
        case_control_statements_ends_group: no
        comment_line_ends_group: yes
        compact_alignment: yes
        if_control_statements_ends_group: no
        include_type_is_keyword: no
        loop_control_statements_ends_group: no

    package_body_001:
        # This rule checks the is keyword is on the same line as the package keyword.
        action: same_line

    package_body_002:
        # This rule checks for the optional package body keywords on the end package body declaration.
        action: add

    package_body_003:
        # This rule checks the package name exists in the closing of the package body declaration.
        action: remove

    package_body_100:
        # This rule checks for a single space between package, body and is keywords.
        number_of_spaces: 1

    package_body_101:
        # This rule checks for a single space between the end, package and body keywords and package name.
        number_of_spaces: 1

    package_body_200:
        # This rule checks for blank lines or comments above the package keyword.
        style: allow_comment

    package_body_201:
        # This rule checks for a blank line below the package keyword.
        style: require_blank_line

    package_body_202:
        # This rule checks for blank lines or comments above the end keyword.
        style: require_blank_line

    package_body_203:
        # This rule checks for a blank line below the end package keyword.
        style: require_blank_line

    package_body_300:
        # This rule checks the indent of the package body keyword.
        phase: 4

    package_body_301:
        # This rule checks the indent of the end package declaration.
        phase: 4

    package_body_400:
        # This rule checks the identifiers for all declarations are aligned in the package body declarative region.
        blank_line_ends_group: yes
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: yes

    package_body_401:
        # This rule checks the colons are in the same column for all declarations in the package body declarative part.
        blank_line_ends_group: yes
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: yes

    package_body_402:
        # This rule checks the colons are in the same column for all attribute specifications.
        blank_line_ends_group: yes
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: yes

    package_body_500:
        # This rule checks the package keyword has proper case.
        case: lower

    package_body_501:
        # This rule checks the body keyword has proper case.
        case: lower

    package_body_502:
        # This rule checks the package name has proper case in the package declaration.
        case: lower
        disable: true
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    package_body_503:
        # This rule checks the is keyword has proper case.
        case: lower

    package_body_504:
        # This rule checks the end keyword has proper case.
        case: lower

    package_body_505:
        # This rule checks the package keyword in the end package body has proper case.
        case: lower

    package_body_506:
        # This rule checks the body keyword in the end package body has proper case.
        case: lower

    package_body_507:
        # This rule checks the package name has proper case on the end package declaration.
        case: lower
        disable: true
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    package_body_600:
        # This rule checks for valid suffixes on package body identifiers. The default package suffix is _pkg.
        disable: true
        exceptions: []
        suffixes: ["_pkg"]

    package_body_601:
        # This rule checks for valid prefixes on package body identifiers. The default package prefix is pkg_.
        disable: true
        exceptions: []
        fixable: false
        prefixes: ["pkg_"]
        severity: Error

    # ---------------------------------------------------------------------------------------------
    # Parameter Specification Rules
    # ---------------------------------------------------------------------------------------------

    parameter_specification_500:
        # This rule checks the parameter identifier has proper case.
        case: lower

    parameter_specification_501:
        # This rule checks the in keyword has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Ports Rules
    # ---------------------------------------------------------------------------------------------

    port_001:
        # This rule checks for a blank line above the port keyword.
        action: no_blank_line

    port_002:
        # This rule checks the indent of the port keyword.
        phase: 4

    port_003:
        # This rule checks for a single space after the port keyword and (.
        number_of_spaces: 1

    port_004:
        # This rule checks the indent of port declarations.
        phase: 4

    port_007:
        # This rule checks for spaces before and after the in mode keyword.
        spaces_after: 4
        spaces_before: 1

    port_008:
        # This rule checks for spaces before and after the out mode keyword.
        spaces_after: 3
        spaces_before: 1

    port_009:
        # This rule checks for spaces before and after the inout mode keyword.
        spaces_after: 1
        spaces_before: 1

    port_010:
        # This rule checks the port names have proper case.
        case: upper
        case_exceptions: []
        fixable: true
        prefix_exceptions: []
        suffix_exceptions: []

    port_011:
        # This rule checks for valid prefixes on port identifiers. The default port prefixes are: I_, O_, IO_.
        disable: false
        exceptions:
            [
                "CLK",
                "CLOCK",
                "RST_N",
                "RESET_N",
                "RST_P",
                "RESET_P",
                "S_AXI",
                "M_AXI",
            ]
        fixable: false
        prefixes:
            [
                "I_",
                "O_",
                "IO_",
                "PAD_I_",
                "PAD_O_",
                "PAD_IO_",
                "S_AXI",
                "M_AXI",
                "REG_",
            ]
        severity: Warning

    port_012:
        # This rule checks for default assignments on port declarations.
        disable: false
        fixable: false
        severity: Error

    port_013:
        # This rule checks for multiple ports declared on a single line.
        action: new_line

    port_014:
        # This rule checks the location of the closing ) character for the port clause.
        action: new_line

    port_015:
        # This rule checks the indent of the closing parenthesis for port maps.
        phase: 4

    port_016:
        # This rule checks for a port definition on the same line as the port keyword.
        action: new_line

    port_017:
        # This rule checks the port keyword has proper case.
        case: lower

    port_019:
        # This rule checks the port direction has proper case.
        case: lower

    port_020:
        # This rule checks for at least one space before the colon.
        number_of_spaces: ">=1"

    port_021:
        # This rule checks the port keyword is on the same line as the (.
        action: same_line

    port_022:
        # This rule checks for blank lines after the port keyword.
        action: no_blank_line

    port_023:
        # This rule checks for missing modes in port declarations.
        fixable: false

    port_024:
        # This rule checks for blank lines before the close parenthesis in port declarations.
        action: new_line

    port_026:
        # This rule checks for multiple identifiers on port declarations.
        action: new_line

    port_027:
        # This rule checks the semicolon is not on its own line.
        action: same_line

    port_100:
        # This rule checks for at least a single space before the assignment.
        number_of_spaces: ">=1"

    port_101:
        # This rule checks for a single space after the assignment.
        number_of_spaces: 1

    port_600:
        # This rule checks for valid prefixes on port identifiers for input ports.
        disable: true
        exceptions: [clk", "clock", "rst_n", "reset_n", "rst_p", "reset_p"]
        fixable: false
        prefixes: ["i_", "pad_i", "m_axi", "s_axi"]
        severity: Warning

    port_601:
        # This rule checks for valid prefixes on port identifiers for output ports.
        disable: true
        exceptions: []
        fixable: false
        prefixes: ["o_", "pad_o", "m_axi", "s_axi"]
        severity: Warning

    port_602:
        # This rule checks for valid prefixes on port identifiers for inout ports.
        disable: true
        exceptions: []
        fixable: false
        prefixes: ["io_", "pad_io"]
        severity: Warning

    port_map_001:
        # This rule checks the port map keywords have proper case.
        case: lower

    port_map_002:
        # This rule checks the port names have proper case.
        case: regex
        regex: "(?!.*[A-Z]{3})[A-Z][a-zA-Z0-9]*(?:_[A-Z0-9][a-zA-Z0-9]*)*"
        case_exceptions: []
        disable: true
        fixable: false
        prefix_exceptions: []
        suffix_exceptions: ["_n", "_p", "_i", "_o", "_t"]
        severity: Warning

    port_map_003:
        # This rule checks the ( character is on the same line as the port map keywords.
        action: same_line

    port_map_004:
        # This rule checks the location of the closing ) character for the port map.
        action: new_line

    port_map_005:
        # This rule checks for a port assignment on the same line as the port map keyword.
        action: new_line

    port_map_007:
        # This rule checks for a single space after the => operator in port maps.
        number_of_spaces: 1

    port_map_008:
        # This rule checks for positional ports. Positional ports are subject to problems when the position of the underlying component changes.
        phase: 1

    port_map_009:
        # This rule checks multiple port assignments on the same line.
        action: new_line

    port_map_010:
        # This rule checks for comments at the end of the port and generic assignments in instantiations. These comments represent additional maintainence. They will be out of sync with the entity at some point. Refer to the entity for port types, port directions and purpose.
        disable: true
        fixable: false
        severity: Error

    port_map_100:
        # This rule checks for at least a single space before the **=>** operator in port maps.
        number_of_spaces: ">=1"

    port_map_200:
        # This rule checks for a blank line below the open parenthesis in a port map.
        style: no_blank_line

    port_map_300:
        # This rule checks for the proper indentation of the port keyword in port maps.
        phase: 4

    port_map_301:
        # This rule checks for the proper indentation of association elements in port maps.
        phase: 4

    port_map_302:
        # This rule checks for the proper indentation of the closing parenthesis in port maps.
        phase: 4

    # ---------------------------------------------------------------------------------------------
    # Pragma Rules
    # ---------------------------------------------------------------------------------------------

    pragma_300:
        # This rule checks the indent of pragmas.
        disable: true
        fixable: false

    pragma_400:
        # This rule checks for blank lines or comments above opening pragmas.
        disable: true
        severity: Error
        style: no_code

    pragma_401:
        # This rule checks for a blank line below opening pragmas.
        disable: true
        severity: Error
        style: no_blank_line

    pragma_402:
        # This rule checks for blank lines or comments above closing pragmas.
        disable: true
        severity: Error
        style: no_blank_line

    pragma_403:
        # This rule checks for a blank line below closing pragmas.
        disable: true
        severity: Error
        style: no_blank_line

    # ---------------------------------------------------------------------------------------------
    # Procedure Rules
    # ---------------------------------------------------------------------------------------------

    procedure_001:
        # This rule checks the indent of the procedure keyword.
        phase: 4

    procedure_002:
        # This rule checks the indent of the begin keyword.
        phase: 4

    procedure_003:
        # This rule checks the indent of the end keyword.
        phase: 4

    procedure_004:
        # This rule checks the indent of parameters.
        phase: 4

    procedure_005:
        # This rule checks the indent of lines between the is and begin keywords
        phase: 4

    procedure_006:
        # This rule checks the indent of the closing parenthesis if it is on its own line.
        phase: 4

    procedure_008:
        # This rule checks the end keyword has proper case.
        case: lower

    procedure_010:
        # This rule checks the identifiers for all declarations are aligned in the procedure declarative part.
        blank_line_ends_group: no
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: yes
        severity: Error

    procedure_012:
        # This rule checks the procedure keyword exist in the closing of the procedure specification.
        action: add

    procedure_013:
        # This rule checks the structure of procedure specifications.
        first_open_paren: remove_new_line
        last_close_paren: remove_new_line
        interface_element: add_new_line
        interface_list_semicolon: ignore
        ignore_single_line: no

    procedure_014:
        # This rule checks the procedure designator exists in the closing of the procedure specification.
        action: remove

    procedure_100:
        # This rule checks for a single space between the following procedure elements: procedure keyword, procedure designator, open parenthesis, close parenthesis, and is keywords.
        number_of_spaces: 1

    procedure_101:
        # This rule checks for a single space between the end and procedure keywords and procedure designator.
        number_of_spaces: 1

    procedure_200:
        # This rule checks for blank lines or comments above the procedure keyword.
        style: no_blank_line_unless_different_library
        severity: Warning

    procedure_401:
        # This rule checks the colons are in the same column for all declarations in the procedure declarative part.
        blank_line_ends_group: yes
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: yes

    procedure_410:
        # This rule checks the alignment of the colon for each parameter in the procedure declaration.
        blank_line_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        separate_generic_port_alignment: yes

    procedure_411:
        # This rule checks the alignment of := operator for each parameter in the procedure declaration.
        blank_line_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        separate_generic_port_alignment: yes

    procedure_500:
        # This rule checks the procedure keyword has proper case.
        case: lower

    procedure_501:
        # This rule checks the procedure designator has proper case.
        case: camelCase
        case_exceptions: []
        disable: true
        fixable: false
        prefix_exceptions: []
        suffix_exceptions: []

    procedure_502:
        # This rule checks the is keyword has proper case.
        case: lower

    procedure_503:
        # This rule checks the begin keyword has proper case.
        case: lower

    procedure_504:
        # This rule checks the end keyword has proper case.
        case: lower

    procedure_506:
        # This rule checks the procedure designator has proper case on the end procedure declaration.
        case: regex
        regex: "(?!.*[A-Z]{3})[A-Z][a-zA-Z0-9]*(?:_[A-Z0-9][a-zA-Z0-9]*)*"
        case_exceptions: []
        fixable: false
        prefix_exceptions: []
        suffix_exceptions: []

    procedure_507:
        # This rule checks for consistent capitalization of procedure names.
        case: lower

    procedure_508:
        # This rule checks that the parameter names have proper case.
        case: lower

    procedure_509:
        # This rule checks for consistent capitalization of parameter names within the subprogram body.
        case: lower

    procedure_510:
        # This rule checks the parameter direction has proper case.
        case: lower

    procedure_511:
        # This rule checks the parameter class has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Procedure Call Rules
    # ---------------------------------------------------------------------------------------------

    procedure_call_001:
        # This rule checks for labels on procedure call statements. Labels on procedure calls are optional and do not provide additional information.
        phase: 1

    procedure_call_002:
        # This rule checks for labels on concurrent procedure call statements. Labels on procedure calls are optional and do not provide additional information.
        phase: 1

    procedure_call_003:
        # This rule checks the structure of procedure calls.
        association_element: ignore
        association_list_comma: remove_new_line
        first_open_paren: remove_new_line
        last_close_paren: remove_new_line
        ignore_single_line: yes

    procedure_call_100:
        # This rule checks for a single space between the following block elements: label, label colon, postponed keyword and the procedure name.
        number_of_spaces: 1

    procedure_call_101:
        # This rule checks for a single space after the => operator in procedure calls.
        number_of_spaces: 1

    procedure_call_300:
        # This rule checks the indent of the procedure_call label.
        phase: 4

    procedure_call_301:
        # This rule checks the indent of the postponed keyword if it exists..
        phase: 4

    procedure_call_302:
        # This rule checks the indent of the procedure name.
        phase: 4

    procedure_call_400:
        # This rule checks the alignment of multiline procedure calls.
        disable: false
        align_left: no
        align_paren: yes
        severity: Error

    procedure_call_401:
        # This rule checks the alignment of :code:`=>` keywords in procedure calls.
        blank_line_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        separate_generic_port_alignment: yes
        severity: Error

    procedure_call_500:
        # This rule checks the label has proper case.
        fixable: false

    procedure_call_501:
        # This rule checks the postponed keyword has proper case.
        case: lower

    procedure_call_502:
        # This rule checks that the parameter names have proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Process Rules
    # ---------------------------------------------------------------------------------------------

    process_001:
        # This rule checks the indent of the process declaration.
        phase: 4

    process_002:
        # This rule checks for a single space after the process keyword.
        number_of_spaces: 1

    process_003:
        # This rule checks the indent of the begin keyword.
        phase: 4

    process_004:
        # This rule checks the begin keyword has proper case.
        case: lower

    process_005:
        # This rule checks the process keyword has proper case.
        case: lower

    process_006:
        # This rule checks the indent of the end process keywords.
        phase: 4

    process_007:
        # This rule checks for a single space after the end keyword.
        number_of_spaces: 1

    process_008:
        # This rule checks the end keyword has proper case.
        case: lower

    process_009:
        # This rule checks the process keyword has proper case in the end process line.
        case: lower

    process_010:
        # This rule checks the begin keyword is on its own line.
        action: new_line

    process_011:
        # This rule checks for a blank line below the end process keyword.
        style: require_blank_line

    process_012:
        # This rule checks for the existence of the is keyword.
        action: add

    process_013:
        # This rule checks the is keyword has proper case.
        case: lower

    process_014:
        # This rule checks for a single space before the is keyword.
        number_of_spaces: 1

    process_015:
        # This rule checks for blank lines or comments above the process declaration.
        style: allow_comment

    process_016:
        # This rule checks the process has a label.
        fixable: false
        severity: Error

    process_017:
        # This rule checks the process label has proper case.
        fixable: true
        case: lower
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    process_018:
        # This rule checks the end process line has a label. The closing label will be added if the opening process label exists.
        action: add

    process_019:
        # This rule checks the end process label has proper case.
        case: lower
        case_exceptions: []
        prefix_exceptions: []
        suffix_exceptions: []

    process_020:
        # This rule checks the indentation of multiline sensitivity lists.
        align_left: no
        align_paren: yes
        severity: Error

    process_021:
        # This rule checks for blank lines above the begin keyword if there are no process declarative items.
        style: require_blank_line

    process_022:
        # This rule checks for a blank line below the begin keyword.
        style: no_blank_line
        # Conflicts with other rulse (loop_statement_200)
        disable: true

    process_023:
        # This rule checks for a blank line above the end process keyword.
        style: require_blank_line
        severity: Error

    process_024:
        # This rule checks for a single space after the process label.
        number_of_spaces: 1

    process_025:
        # This rule checks for a single space after the colon and before the process keyword.
        number_of_spaces: 1

    process_026:
        # This rule checks for blank lines above the first declarative line, if it exists.
        style: require_blank_line

    process_027:
        # This rule checks for blank lines above the begin keyword if a declarative item exists.
        style: require_blank_line
        severity: Warning

    process_028:
        # This rule checks the alignment of the closing parenthesis of a sensitivity list. Parenthesis on multiple lines should be in the same column.
        align_to: keyword

    process_029:
        # This rule checks for the format of clock definitions in clock processes. The rule can be set to enforce event definition:
        clock: edge
        disable: false

    process_030:
        # This rule checks for a single signal per line in a sensitivity list that is not the last one. The sensitivity list is required by the compiler, but provides no useful information to the reader. Therefore, the vertical spacing of the sensitivity list should be minimized. This will help with code readability.
        disable: false
        fixable: false
        severity: Error

    process_031:
        # This rule checks for alignment of identifiers in the process declarative region.
        blank_line_ends_group: no
        case_control_statements_ends_group: no
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: yes

    process_033:
        # This rule checks the colons are in the same column for all declarations in the process declarative part.
        blank_line_ends_group: no
        case_control_statements_ends_group: no
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: yes

    process_034:
        # This rule aligns inline comments between the end of the process sensitivity list and the process begin keyword.
        blank_line_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        include_lines_without_comments: no
        separate_generic_port_alignment: yes

    process_035:
        # This rule checks the alignment of inline comments between the process begin and end process lines.
        blank_line_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        disable: false
        fixable: true
        include_lines_without_comments: yes
        separate_generic_port_alignment: yes
        severity: Error

    process_036:
        # This rule checks for valid prefixes on process labels.
        disable: false
        severity: Error
        exceptions: []
        prefixes: ["p_"]

    process_037:
        # This rule checks a label and the colon are on the same line.
        action: same_line

    process_038:
        # This rule checks a label colon is on the same line as the process or postponed keyword.
        action: same_line

    process_039:
        # This rule checks a postponed keyword is on the same line at the process keyword.
        action: same_line

    process_400:
        # This rule checks the alignment of the <= and := operators over consecutive sequential assignments in the process_statement_part.
        blank_line_ends_group: no
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: yes

    process_401:
        # This rule checks the colons are in the same column for all attribute specifications.
        blank_line_ends_group: no
        case_control_statements_ends_group: yes
        comment_line_ends_group: yes
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: yes

    process_600:
        # This rule checks for valid suffixes on process labels. The default suffix is _proc.
        disable: true
        exceptions: []
        fixable: false
        severity: Error
        suffixes: []

    # ---------------------------------------------------------------------------------------------
    # Protected Type Rules
    # ---------------------------------------------------------------------------------------------

    protected_type_300:
        # This rule checks the indent of the end protected type declaration.
        phase: 4

    protected_type_500:
        # This rule checks the protected keyword has proper case.
        case: lower

    protected_type_501:
        # This rule checks the end keyword in end protected has proper case.
        case: lower

    protected_type_502:
        # This rule checks the protected keyword in end protected has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Protected Type Body Rules
    # ---------------------------------------------------------------------------------------------

    protected_type_body_300:
        # This rule checks the indent of the end protected type body declaration.
        phase: 4

    protected_type_body_400:
        # This rule checks the identifiers for all declarations are aligned in the protected type body declarative region.
        compact_alignment: yes
        blank_line_ends_group: yes
        comment_line_ends_group: no

    protected_type_body_401:
        # This rule checks the colons are in the same column for all declarations in the protected type body declarative part.
        aggregate_parens_ends_group: no
        blank_line_ends_group: no
        comment_line_ends_group: no
        compact_alignment: yes
        ignore_single_line_aggregates: yes

    protected_type_body_402:
        # This rule checks the colons are in the same column for all attribute specifications.
        aggregate_parens_ends_group: no
        blank_line_ends_group: no
        comment_line_ends_group: no
        compact_alignment: yes
        ignore_single_line_aggregates: yes

    protected_type_body_500:
        # This rule checks the protected keyword in protected body has proper case.
        case: lower

    protected_type_body_501:
        # This rule checks the body keyword in protected body has proper case.
        case: lower

    protected_type_body_502:
        # This rule checks the end keyword in end protected body has proper case.
        case: lower

    protected_type_body_503:
        # This rule checks the protected keyword in end protected body has proper case.
        case: lower

    protected_type_body_504:
        # This rule checks the body keyword in end protected body has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Range Constraint Rules
    # ---------------------------------------------------------------------------------------------

    range_constraint_500:
        # This rule checks the range keyword in range constraints has the proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Range Rules
    # ---------------------------------------------------------------------------------------------

    range_001:
        # This rule checks the case of the downto keyword.
        case: lower

    range_002:
        # This rule checks the case of the to keyword.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Record Type Definition Rules
    # ---------------------------------------------------------------------------------------------

    record_type_definition_001:
        # This rule checks the location of the record keyword.
        action: same_line

    record_type_definition_002:
        # This rule checks for code after the record keyword.
        action: new_line

    record_type_definition_003:
        # This rule checks the end keyword is on its own line.
        action: new_line

    record_type_definition_004:
        # This rule checks the is keyword is on the same line as the record keyword.
        action: same_line

    record_type_definition_005:
        # This rule checks for the optional simple name in the end record statement.
        action: add

    record_type_definition_006:
        # This rule checks the optional simple name is on the same line as the record keyword.
        action: same_line

    record_type_definition_007:
        # This rule checks the semicolon is on the same line as the record keyword.
        action: same_line

    record_type_definition_100:
        # This rule checks for a single space after the end keyword.
        number_of_spaces: 1

    record_type_definition_101:
        # This rule checks for a single space before the simple name.
        number_of_spaces: 1

    record_type_definition_200:
        # This rule checks for blank lines below the record keyword.
        style: no_blank_line

    record_type_definition_201:
        # This rule checks for blank lines above the end keyword.
        style: no_blank_line

    record_type_definition_300:
        # This rule checks the indent of the record keyword if it is on its own line.
        phase: 4

    record_type_definition_301:
        # This rule checks the indent of the end keyword.
        phase: 4

    record_type_definition_500:
        # This rule checks the proper case of the record keyword.
        case: lower

    record_type_definition_501:
        # This rule checks the proper case of the end keyword.
        case: lower

    record_type_definition_502:
        # This rule checks the proper case of the end record keyword.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Report Statement Rules
    # ---------------------------------------------------------------------------------------------

    report_statement_001:
        # This rule removes labels on report_statement_statements.
        action: remove

    report_statement_002:
        # This rule checks the severity keyword is on its own line.
        disable: true
        fixable: false
        severity: Error

    report_statement_100:
        # This rule checks for a single space after the report keyword.
        number_of_spaces: 1

    report_statement_101:
        # This rule checks for a single space after the severity keyword.
        number_of_spaces: 1

    report_statement_300:
        # This rule checks indent of multiline report statements.
        phase: 4

    report_statement_400:
        # This rule checks the alignment of the report expressions.
        alignment: report
        phase: 4

    report_statement_500:
        # This rule checks the report keyword has proper case.
        case: lower

    report_statement_501:
        # This rule checks the severity keyword has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Return Statement Rules
    # ---------------------------------------------------------------------------------------------

    return_statement_300:
        # This rule checks the indent of the return keyword.
        phase: 4

    # ---------------------------------------------------------------------------------------------
    # Selected Assignment Rules
    # ---------------------------------------------------------------------------------------------
    selected_assignment_001:
        # This rule checks the with keyword is on the same line as the expression.
        action: same_line

    selected_assignment_002:
        # This rule checks the select keyword is on the same line as the expression.
        action: same_line

    selected_assignment_003:
        # This rule checks the select keyword is on the same line as the target.
        action: same_line

    selected_assignment_004:
        # This rule checks the assignment is on the same line as the target.
        action: same_line

    selected_assignment_005:
        # This rule checks for code after the assignment.
        action: new_line

    selected_assignment_006:
        # This rule checks for code after the force keyword.
        action: new_line

    selected_assignment_007:
        # This rule checks for code after the force mode keywords in and out.
        action: new_line

    selected_assignment_008:
        # This rule checks for code after the guarded keyword.
        action: new_line

    selected_assignment_009:
        # This rule checks for code after the delay mechanism keywords transport and inertial.
        action: new_line

    selected_assignment_010:
        # This rule checks the when keyword is on the same line as the expression or waveform.
        action: same_line

    selected_assignment_011:
        # This rule checks the choice is on the same line as the when keyword.
        action: same_line

    selected_assignment_012:
        # This rule checks for code after the comma in choices.
        action: new_line

    selected_assignment_100:
        # This rule checks for a single space after the with keyword.
        number_of_spaces: 1

    selected_assignment_101:
        # This rule checks for a single space before the select keyword.
        number_of_spaces: 1

    selected_assignment_102:
        # This rule checks for a single space after the select keyword.
        number_of_spaces: 1

    selected_assignment_103:
        # This rule checks for a single space before the assignment.
        number_of_spaces: 1

    selected_assignment_104:
        # This rule checks for a single space after the assignment.
        disable: false
        fixable: true
        number_of_spaces: 1

    selected_assignment_105:
        # This rule checks for a single space after the force keyword.
        number_of_spaces: 1

    selected_assignment_106:
        # This rule checks for a single space before the when keyword.
        number_of_spaces: 1

    selected_assignment_107:
        # This rule checks for a single space after the when keyword.
        number_of_spaces: 1

    selected_assignment_300:
        # This rule checks the indent of the with keyword.
        phase: 4
    selected_assignment_400:
        # This rule checks the alignment of multiline selected assignment statements.
        align_left: no
        align_paren: yes
        severity: Error

    selected_assignment_500:
        # This rule checks the with keyword has proper case.
        case: lower

    selected_assignment_501:
        # This rule checks the select keyword has proper case.
        case: lower

    selected_assignment_502:
        # This rule checks the force keyword has proper case.
        case: lower

    selected_assignment_503:
        # This rule checks the when keyword has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Sequential Rules
    # ---------------------------------------------------------------------------------------------
    sequential_001:
        # This rule checks the indent of sequential statements.
        phase: 4

    sequential_002:
        # This rule checks for a single space after the <= operator.
        number_of_spaces: 1

    sequential_003:
        # This rule checks for at least a single space before the <= operator.
        number_of_spaces: ">=1"

    sequential_004:
        # This rule checks the alignment of multiline sequential statements.
        align_left: no
        align_paren: yes
        severity: Error

    sequential_006:
        # This rule checks for comments within multiline sequential statements.
        action: remove

    sequential_007:
        # This rule checks for code after a sequential assignment.
        action: new_line

    sequential_008:
        # This rule checks the structure of simple and conditional sequential signal assignments.
        ignore_single_line: no
        new_line_after_assign: no

    sequential_009:
        # This rule checks the structure of multiline simple sequential signal assignments that contain arrays.
        compact_alignment: yes
        blank_line_ends_group: no
        comment_line_ends_group: yes
        if_control_statements_ends_group: yes
        generate_statements_ends_group: yes
        loop_control_generic_port_alignment: yes
        include_type_is_keyword: yes
        aggregate_parens_ends_group: no
        ignore_single_line_aggregates: no
        align_to: keyword

    sequential_400:
        # This rule checks the alignment the => operator in record aggregates.
        compact_alignment: yes
        blank_line_ends_group: no
        comment_line_ends_group: yes
        if_control_statements_ends_group: yes
        generate_statements_ends_group: yes
        loop_control_generic_port_alignment: yes
        aggregate_parens_ends_group: no
        ignore_single_line_aggregates: no
        align_to: keyword

    sequential_401:
        # This rule checks alignment of multiline sequential conditional signal assignments.
        align_left: no
        align_paren: yes
        align_when_keywords: yes
        wrap_at_when: yes
        align_else_keywords: yes

    sequential_402:
        # This rule checks the alignment of multiline simple sequential signal assignments that contain arrays.
        align_left: no
        align_paren: yes
        severity: Error

    # ---------------------------------------------------------------------------------------------
    # Signal Rules
    # ---------------------------------------------------------------------------------------------

    signal_001:
        # This rule checks the indent of signal declarations.
        phase: 4

    signal_002:
        # This rule checks the signal keyword has proper case.
        case: lower
        disable: true

    signal_004:
        # This rule checks the signal name has proper case.
        case: regex
        regex: "(?!.*[A-Z]{3})[A-Z][a-zA-Z0-9]*(?:_[A-Z0-9][a-zA-Z0-9]*)*"
        case_exceptions:
            [
                "r",
                "rs",
                "rp",
                "ra",
                "ri",
                "ro",
                "r_next",
                "rs_next",
                "rp_next",
                "ra_next",
                "ri_next",
                "ro_next",
                "net",
            ]
        disable: true
        fixable: false
        prefix_exceptions: []
        suffix_exceptions: ["_n", "_p", "_i", "_o", "_t"]

    signal_005:
        # This rule checks for a single space after the colon.
        number_of_spaces: 1

    signal_006:
        # This rule checks for at least a single space before the colon.
        number_of_spaces: ">=1"

    signal_007:
        # This rule checks for default assignments in signal declarations.
        disable: false
        fixable: false
        severity: Warning

    signal_008:
        # This rule checks for valid prefixes on signal identifiers. Default signal prefix is s_.
        disable: true
        exceptions: []
        fixable: false
        prefixes: []
        severity: Error

    signal_012:
        # This rule checks multiple signal declarations on a single line are column aligned.
        blank_line_ends_group: no
        comment_line_ends_group: yes
        compact_alignment: yes
        disable: false
        fixable: true
        severity: Error

    signal_014:
        # This rule checks for consistent capitalization of signal names.
        case: lower

    signal_015:
        # This rule checks for multiple signal names defined in a single signal declaration. By default, this rule will only flag more than two signal declarations.
        consecutive: 2

    signal_017:
        # This rule checks the structure of signal constraints.
        array_constraint: ignore
        exceptions: ["keep_record_constraint_with_single_element_on_one_line"]
        record_constraint_close_paren: remove_new_line
        record_constraint_comma: remove_new_line
        record_constraint_element: add_new_line
        record_constraint_open_paren: remove_new_line

    signal_100:
        # This rule checks for a single space before the identifier.
        number_of_spaces: 1
        severity: Error

    signal_101:
        # This rule checks for a single space before the default assignment token.
        number_of_spaces: ">=1"

    signal_102:
        # This rule checks for a single space after the default assignment token.
        number_of_spaces: 1

    signal_200:
        # This rule checks for a blank line below a signal declaration unless there is another signal definition.
        disable: true
        style: require_blank_line
        severity: Error

    signal_400:
        # This rule checks alignment of multiline constraints in signal declarations.
        align_left: no
        align_paren: yes

    signal_600:
        # This rule checks for valid suffixes on signal identifiers. Default signal suffix is _s.
        disable: true
        exceptions: []
        fixable: false
        severity: Error
        suffixes: []

    # ---------------------------------------------------------------------------------------------
    # Shift Operator Rules
    # ---------------------------------------------------------------------------------------------

    shift_operator_500:
        # This rule checks shift operators have proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Subprogram Body Rules
    # ---------------------------------------------------------------------------------------------

    subprogram_body_201:
        # This rule checks for a blank line below the is keyword.
        style: no_blank_line

    subprogram_body_202:
        # This rule checks for blank lines above the begin keyword.
        style: no_blank_line

    subprogram_body_203:
        # This rule checks for a blank line below the begin keyword.
        style: no_blank_line
        #Conflicting with other rules (loop blank-lines)
        disable: true

    subprogram_body_204:
        # This rule checks for blank lines above the end keyword.
        style: no_blank_line
        severity: Error # Could be Warning for Development
        #Conflicting with other rules (loop blank-lines)
        disable: true

    subprogram_body_205:
        # This rule checks for a blank line below the end of the function declaration.
        style: require_blank_line

    subprogram_body_400:
        # This rule checks the alignment of the <= and := operators over consecutive sequential assignments in subprogram bodies.
        blank_line_ends_group: no
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: yes
        severity: Error

    subprogram_body_401:
        # This rule checks the colons are in the same column for all attribute specifications.
        blank_line_ends_group: yes
        case_control_statements_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        if_control_statements_ends_group: yes
        loop_control_statements_ends_group: yes

    subprogram_kind_500:
        # This rule checks that the procedure keyword in subprogram kinds has the proper case.
        case: lower

    subprogram_kind_501:
        # This rule checks that the function keyword in subprogram kinds has the proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Type Rules
    # ---------------------------------------------------------------------------------------------

    type_001:
        # This rule checks the indent of the type declaration.
        phase: 4

    type_002:
        # This rule checks the type keyword has proper case.
        case: lower

    type_004:
        # This rule checks the type identifier has proper case.
        case: regex
        regex: "(?!.*[A-Z]{3})[A-Z][a-zA-Z0-9]*(?:_[A-Z0-9][a-zA-Z0-9]*)*"
        case_exceptions: []
        disable: true
        fixable: false
        prefix_exceptions: []
        suffix_exceptions: ["_r", "_t", "_a"]

    type_005:
        # This rule checks the indent of multiline enumerated types.
        phase: 4

    type_006:
        # This rule checks for a single space before the is keyword.
        number_of_spaces: ">=1"

    type_007:
        # This rule checks for a single space after the is keyword.
        number_of_spaces: 1

    type_008:
        # This rule checks the closing parenthesis of multiline enumerated types is on its own line.
        action: new_line

    type_009:
        # This rule checks for an enumerate type after the open parenthesis on multiline enumerated types.
        action: new_line

    type_010:
        # This rule checks for blank lines or comments above the type declaration.
        disable: true
        phase: 3
        style: allow_comment

    type_011:
        # This rule checks for a blank line below the type declaration.
        disable: true
        fixable: false
        style: require_blank_line

    type_012:
        # This rule checks the indent of record elements in record type declarations.
        phase: 4

    type_013:
        # This rule checks the is keyword in type definitions has proper case.
        case: lower

    type_014:
        # This rule checks for consistent capitalization of type names.
        case: lower

    type_015:
        # This rule checks for valid prefixes in user defined type identifiers. The default new type prefix is t_.
        disable: false
        exceptions: []
        fixable: false
        phase: 7
        prefixes: ["t_", "type_"]
        severity: Error

    type_016:
        # This rule checks the indent of the closing parenthesis on multiline types.
        phase: 4

    type_017:
        # This rule checks the identifier is on the same line as the type keyword.
        action: same_line

    type_018:
        # This rule checks the is keyword is on the same line as the identifier.
        action: same_line

    type_100:
        # This rule checks for a single space before the identifier.
        number_of_spaces: ">=1"

    type_200:
        # This rule checks for a blank line below a type declaration unless there is another type declaration.
        style: require_blank_line
        severity: Error

    type_400:
        # This rule checks the colons are in the same column for all elements in the block declarative part.
        blank_line_ends_group: yes
        comment_line_ends_group: no
        compact_alignment: yes
        phase: 5
        separate_generic_port_alignment: yes

    type_500:
        # This rule checks enumerate types have proper case.
        case: upper

    type_501:
        # This rule checks for consistent capitalization of enumerated types.
        case: upper

    type_600:
        # This rule checks for valid suffixes in user defined type identifiers. The default new type suffix is _t.
        exceptions: []
        suffixes: ["_r", "_t", "_a"]

    # ---------------------------------------------------------------------------------------------
    # Type Mark Rules
    # ---------------------------------------------------------------------------------------------

    type_mark_500:
        # This rule checks that the type marks without declarations in the current file have proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Unbounded Array Definition Rules
    # ---------------------------------------------------------------------------------------------

    unbounded_array_definition_500:
        # This rule checks the array keyword has proper case.
        case: lower

    unbounded_array_definition_501:
        # This rule checks the of keyword has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Use Clause Rules
    # ---------------------------------------------------------------------------------------------

    use_clause_500:
        # This rule checks the library name called out in the selected name has proper case.
        case: lower

    use_clause_501:
        # This rule checks the package name called out in the selected name has proper case.
        case: lower

    use_clause_502:
        # This rule checks the item name called out in the selected name has proper case.
        case: lower

    use_clause_503:
        # This rule checks the all keyword called out in the selected name has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # Variable Rules
    # ---------------------------------------------------------------------------------------------

    variable_001:
        # This rule checks the indent of variable declarations.
        phase: 4

    variable_002:
        # This rule checks the variable keyword has proper case.
        case: lower

    variable_004:
        # This rule checks the variable name has proper case.
        case: lower
        case_exceptions: []
        fixable: true
        prefix_exceptions: ["v_"]
        suffix_exceptions: ["_v"]

    variable_005:
        # This rule checks there is a single space after the colon.
        number_of_spaces: 1

    variable_006:
        # This rule checks for at least a single space before the colon.
        number_of_spaces: ">=1"

    variable_007:
        # This rule checks for default assignments in variable declarations.
        disable: false
        fixable: false
        severity: Warning

    variable_011:
        # This rule checks for consistent capitalization of variable names.
        case: lower

    variable_012:
        # This rule checks for valid prefixes on variable identifiers. The default variable prefix is v_.
        disable: false
        exceptions: []
        fixable: false
        prefixes: ["v_"]
        severity: Error

    variable_017:
        # This rule checks the structure of variable constraints.
        array_constraint: all_in_one_line
        exceptions: []
        record_constraint_close_paren: add_new_line
        record_constraint_comma: add_new_line
        record_constraint_element: add_new_line
        record_constraint_open_paren: add_new_line

    variable_100:
        # This rule checks for a single space before the identifier.
        number_of_spaces: ">=1"

    variable_101:
        # This rule checks for a single space after the shared keyword.
        number_of_spaces: 1

    variable_102:
        # This rule checks for a single space before the assignment.
        number_of_spaces: ">=1"

    variable_103:
        # This rule checks for a single space after the assignment.
        number_of_spaces: 1

    variable_400:
        # This rule checks alignment of multiline constraints in variable declarations.
        align_left: no
        align_paren: yes
        severity: Error

    variable_600:
        # This rule checks for valid suffix on variable identifiers. The default variable suffix is _v.
        disable: true
        exceptions: []
        suffixes: []

    variable_assignment_001:
        # This rule checks the indent of a variable assignment.
        phase: 4

    variable_assignment_002:
        # This rule checks for a single space after the assignment.
        number_of_spaces: 1

    variable_assignment_003:
        # This rule checks for at least a single space before the assignment.
        number_of_spaces: ">=1"

    variable_assignment_004:
        # This rule checks the alignment of multiline variable assignments.
        align_left: no
        align_paren: yes
        severity: Error

    variable_assignment_006:
        # This rule checks for comments in multiline variable assignments.
        severity: Error

    variable_assignment_007:
        # This rule checks the structure of simple and conditional variable assignments.
        ignore_single_line: yes
        new_line_after_assign: no
        severity: Error

    variable_assignment_008:
        # This rule checks the structure of multiline variable assignments that contain arrays.
        first_paren_new_line: no
        last_paren_new_line: no
        open_paren_new_line: no
        close_paren_new_line: no
        new_line_after_comma: yes
        assign_on_single_line: yes
        ignore_single_line: yes

    variable_assignment_400:
        # This rule checks alignment of multiline conditional variable assignments.
        align_else_keywords: yes
        align_left: no
        align_paren: yes
        align_when_keywords: yes
        wrap_at_when: yes

    variable_assignment_401:
        # This rule checks the alignment of multiline variable assignments that contain arrays.
        disable: false
        align_left: no
        align_paren: yes
        severity: Error

    # ---------------------------------------------------------------------------------------------
    # Wait Rules
    # ---------------------------------------------------------------------------------------------

    wait_001:
        # This rule checks for indentation of the wait keyword. Proper indentation enhances comprehension.
        phase: 4

    wait_300:
        # This rule checks for indentation of the label. Proper indentation enhances comprehension.
        phase: 4

    wait_500:
        # This rule checks the wait keyword has proper case.
        case: lower

    wait_501:
        # This rule checks the on keyword has proper case.
        case: lower

    wait_502:
        # This rule checks the until keyword has proper case.
        case: lower

    wait_503:
        # This rule checks the for keyword has proper case.
        case: lower

    # ---------------------------------------------------------------------------------------------
    # When Rules
    # ---------------------------------------------------------------------------------------------

    when_001:
        # This rule checks the else keyword is not at the beginning of a line. The else should be at the end of the preceding line.
        action: same_line

    # ---------------------------------------------------------------------------------------------
    # Whitespace Rules
    # ---------------------------------------------------------------------------------------------

    whitespace_001:
        # This rule check for trailing spaces.
        number_of_spaces: 0

    whitespace_002:
        # This rule will check for the existence of tabs in the middle of a line.
        phase: 1

    whitespace_003:
        # This rule checks for spaces before semicolons.
        number_of_spaces: 0

    whitespace_004:
        # This rule checks for spaces before commas.
        number_of_spaces: 1

    whitespace_005:
        # This rule checks for spaces after an open parenthesis.
        number_of_spaces: 0

    whitespace_006:
        # This rule checks for spaces before a close parenthesis.
        number_of_spaces: 0

    whitespace_007:
        # This rule checks for spaces after a comma.
        number_of_spaces: ">=1"

    whitespace_008:
        # This rule checks for spaces after the std_logic_vector keyword.
        number_of_spaces: 0

    whitespace_010:
        # This rule checks for spaces before and after the concate (&) operator.
        number_of_spaces: 1
        severity: Warning

    whitespace_011:
        # This rule checks for at least a single space before and after math operators +, -, /, \* and \\.
        disable: false
        fixable: true
        number_of_spaces: 1
        severity: Error

    whitespace_013:
        # This rule checks for at least a single space before and after logical operators.
        number_of_spaces: ">=1"

    whitespace_100:
        # This rule checks for at least a single space before and after relational operators.
        number_of_spaces: ">=1"

    whitespace_200:
        # This rule enforces a maximum number of consecutive blank lines.
        blank_lines_allowed: 1
